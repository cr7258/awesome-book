{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/ArgoCD%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/","text":"ArgoCD \u7b80\u660e\u6559\u7a0b 1 Argo CD \u7b80\u4ecb Argo CD \u662f\u4e00\u4e2a\u4e3a Kubernetes \u800c\u751f\u7684\uff0c\u9075\u5faa\u58f0\u660e\u5f0f GitOps \u7406\u5ff5\u7684\u6301\u7eed\u90e8\u7f72\uff08CD\uff09\u5de5\u5177\uff0c\u5b83\u7684\u914d\u7f6e\u548c\u4f7f\u7528\u975e\u5e38\u7b80\u5355\uff0c\u5e76\u4e14\u81ea\u5e26\u4e00\u4e2a\u7b80\u5355\u6613\u7528\u7684 Dashboard \u9875\u9762\uff0c\u5e76\u4e14\u652f\u6301\u591a\u79cd\u914d\u7f6e\u7ba1\u7406/\u6a21\u677f\u5de5\u5177\uff08\u4f8b\u5982 Kustomize\u3001Helm\u3001Ksonnet\u3001Jsonnet\u3001plain-YAML\uff09\u3002 Argo CD \u88ab\u5b9e\u73b0\u4e3a\u4e00\u4e2a Kubernetes \u63a7\u5236\u5668\uff0c\u5b83\u6301\u7eed\u76d1\u63a7\u6b63\u5728\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u5e76\u5c06\u5f53\u524d\u7684\u5b9e\u65f6\u72b6\u6001\u4e0e\u6240\u9700\u7684\u76ee\u6807\u72b6\u6001\uff08\u4f8b\u5982 Git \u4ed3\u5e93\u4e2d\u7684\u914d\u7f6e\uff09\u8fdb\u884c\u6bd4\u8f83\uff0c\u5728 Git \u4ed3\u5e93\u66f4\u6539\u65f6\u81ea\u52a8\u540c\u6b65\u548c\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u3002 2 \u67b6\u6784\u56fe Argo CD \u5728 CI/CD \u6d41\u7a0b\u4e2d\u7684\u4f4d\u7f6e\u5982\u4e0b\u56fe\u6240\u793a\uff0cArgo CD \u7684\u4e3b\u8981\u804c\u8d23\u662f CD\uff08Continuous Delivery\uff0c\u6301\u7eed\u4ea4\u4ed8\uff09\uff0c\u5c06\u5e94\u7528\u90e8\u7f72\u5230 Kubernetes \u7b49\u73af\u5883\u4e2d\uff0c\u800c CI\uff08Continuous Integration\uff0c\u6301\u7eed\u96c6\u6210\uff09\u4e3b\u8981\u662f\u4ea4\u7ed9 Jenkins\uff0cGitlab CI \u7b49\u5de5\u5177\u6765\u5b8c\u6210\u3002 \u8fd9\u91cc\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b GitOps \u7684\u6982\u5ff5\uff0cGitOps \u8fd9\u4e2a\u8bcd\u51fa\u73b0\u4e8e 2017 \u5e74\uff0c\u662f\u7531 Weaveworks \u516c\u53f8\u6839\u636e\u591a\u5e74\u4e91\u8ba1\u7b97\u57fa\u7840\u8bbe\u65bd\u548c\u5e94\u7528\u7a0b\u5e8f\u7ba1\u7406\u7ecf\u9a8c\u800c\u63d0\u51fa\u7684\u4e00\u4e2a\u6982\u5ff5\uff0c\u5b83\u662f\u4e00\u79cd\u8fdb\u884c Kubernetes \u96c6\u7fa4\u7ba1\u7406\u548c\u5e94\u7528\u7a0b\u5e8f\u4ea4\u4ed8\u7684\u65b9\u5f0f\uff0cGitOps \u4f7f\u7528 Git \u4f5c\u4e3a\u58f0\u660e\u6027\u57fa\u7840\u8bbe\u65bd\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u5355\u4e00\u4e8b\u5b9e\u6765\u6e90\u3002 GitOps \u7684\u6838\u5fc3\u601d\u60f3\u662f\u62e5\u6709\u4e00\u4e2a Git \u4ed3\u5e93\uff0c\u5305\u542b\u76ee\u6807\u73af\u5883\u4e2d\u5f53\u524d\u6240\u9700\u57fa\u7840\u8bbe\u65bd\u7684 \u58f0\u660e\u6027 \u63cf\u8ff0\uff0c\u4ee5\u53ca\u4f7f\u76ee\u6807\u73af\u5883\u4e0e Git \u4ed3\u5e93\u4e2d\u63cf\u8ff0\u7684\u72b6\u6001\u76f8\u5339\u914d\u7684\u81ea\u52a8\u5316\u8fc7\u7a0b\uff0cArgo CD \u5c31\u662f\u4e00\u4e2a\u9075\u5faa\u4e86 GitOps \u7406\u5ff5\u7684\u6301\u7eed\u90e8\u7f72\uff08CD\uff09\u5de5\u5177\u3002 \u5728 GitOps \u6a21\u5f0f\u7684 CI/CD \u6d41\u6c34\u7ebf\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u6d41\u7a0b\uff1a - 1.\u5c06\u5e94\u7528\u7684 Git \u4ed3\u5e93\u5206\u4e3a Application Deployment file \u548c Docker file \u4e24\u4e2a\u5e93\u3002 Docker file \u7528\u4e8e\u5b58\u653e\u5e94\u7528\u7684\u6838\u5fc3\u4ee3\u7801\u4ee5\u53ca Docker build file\uff0c\u540e\u7eed\u5c06\u4f1a\u76f4\u63a5\u6253\u5305\u6210 Docker image\uff1bApplication Deployment file \u53ef\u4ee5 Kustomize\u3001Helm\u3001Ksconnet\u3001Jsonnet \u7b49\u591a\u79cd Kubernetes \u5305\u7ba1\u7406\u5de5\u5177\u6765\u5b9a\u4e49\uff1b\u4ee5 Helm \u4e3a\u4f8b\uff0cChart \u4e2d\u6240\u4f7f\u7528\u5230\u7684 Image \u7531 Docker file Code \u6253\u5305\u5b8c\u6210\u540e\u63d0\u4f9b\u3002 - 2.\u4f7f\u7528 Jenkins \u6216 Gitlab \u7b49 CI \u5de5\u5177\u8fdb\u884c\u81ea\u52a8\u5316\u6784\u5efa\u6253\u5305\uff0c\u5e76\u5c06 Docker image push \u5230 Harbor \u955c\u50cf\u4ed3\u5e93\u3002 - 3.\u4f7f\u7528 Argo CD \u90e8\u7f72\u5e94\u7528\u3002Argo CD \u53ef\u4ee5\u72ec\u7acb\u4e8e\u96c6\u7fa4\u4e4b\u5916\uff0c\u5e76\u4e14\u652f\u6301\u7ba1\u7406\u591a\u4e2a Kubernetes \u96c6\u7fa4\u3002\u5728 Argo CD \u4e0a\u914d\u7f6e\u597d\u5e94\u7528\u90e8\u7f72\u7684\u76f8\u5173\u4fe1\u606f\u540e Argo CD \u4fbf\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0cArgo CD \u4f1a\u81ea\u52a8\u548c\u4ee3\u7801\u4ed3\u5e93 Application deployment file \u7684\u5185\u5bb9\u8fdb\u884c\u6821\u9a8c\uff0c\u5f53\u4ee3\u7801\u4ed3\u5e93\u4e2d\u5e94\u7528\u5c5e\u6027\u7b49\u4fe1\u606f\u53d1\u751f\u53d8\u5316\u65f6\uff0cArgo CD \u4f1a\u81ea\u52a8\u540c\u6b65\u66f4\u65b0 Kubernetes \u96c6\u7fa4\u4e2d\u7684\u5e94\u7528\uff1b\u5e94\u7528\u542f\u52a8\u65f6\uff0c\u4f1a\u4ece Harbor \u955c\u50cf\u4ed3\u5e93\u62c9\u53d6 Docker image\u3002 \u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u7b2c 3 \u90e8\u5206 Argo CD \u90e8\u7f72\u5e94\u7528\uff0c\u5173\u4e8e GitOps \u7684\u5b8c\u6574\u5b9e\u8df5\u540e\u7eed\u4f1a\u53d1\u6587\u8fdb\u884c\u4ecb\u7ecd\u3002 3 \u5feb\u901f\u5f00\u59cb 3.1 \u524d\u63d0\u6761\u4ef6 1.\u51c6\u5907\u597d\u4e00\u5957 Kubernetes \u96c6\u7fa4\uff0c\u53c2\u89c1 \u4f7f\u7528 ezctl \u5de5\u5177\u90e8\u7f72\u548c\u7ba1\u7406 Kubernetes \u96c6\u7fa4 \u3002 2.\u642d\u5efa\u597d Gitlab \u4ee3\u7801\u4ed3\u5e93\uff0c\u53c2\u89c1 Gitlab \u5b89\u88c5\u6307\u5357 \u3002 3.2 \u5b89\u88c5 Argo CD \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5728 argocd \u547d\u540d\u7a7a\u95f4\u90e8\u7f72 Argo CD\u3002 # \u521b\u5efa\u547d\u540d\u7a7a\u95f4 kubectl create namespace argocd # \u90e8\u7f72 argo cd wget https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml kubectl apply -n argocd -f install.yaml 3.3 \u5b89\u88c5 Argo CD CLI Argo CD CLI \u662f\u7528\u4e8e\u7ba1\u7406 Argo CD \u7684\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u5177\u4f53\u7684\u5b89\u88c5\u65b9\u5f0f\u53ef\u4ee5\u53c2\u8003 Argo CD CLI Installation Mac \u7cfb\u7edf\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 brew install \u8fdb\u884c\u5b89\u88c5\u3002 brew install argocd 3.4 \u53d1\u5e03 Argo CD \u670d\u52a1 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c Argo CD \u670d\u52a1\u4e0d\u5bf9\u5916\u66b4\u9732\u670d\u52a1\uff0c\u53ef\u4ee5\u901a\u8fc7 LoadBalancer \u6216\u8005 NodePort \u7c7b\u578b\u7684 Service\u3001Ingress\u3001Kubectl \u7aef\u53e3\u8f6c\u53d1\u7b49\u65b9\u5f0f\u5c06 Argo CD \u670d\u52a1\u53d1\u5e03\u5230 Kubernetes \u96c6\u7fa4\u5916\u90e8\u3002 \u8fd9\u91cc\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u901a\u8fc7 NodePort \u670d\u52a1\u7684\u65b9\u5f0f\u66b4\u9732 Argo CD \u5230\u96c6\u7fa4\u5916\u90e8\u3002 kubectl patch svc argocd-server -n argocd -p '{\"spec\": {\"type\": \"NodePort\"}}' \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u5c06\u540d\u5b57\u4e3a argocd-server \u7684 Service \u6539\u6210 NodePort \u7c7b\u578b\u4e86\uff0c\u53ef\u4ee5\u5728\u96c6\u7fa4\u5916\u90e8\u901a\u8fc7 <\u8282\u70b9 IP>:<\u968f\u673a\u751f\u6210\u7684 NodePort \u7aef\u53e3> \u6765\u8bbf\u95ee Argo CD\uff0c\u6211\u8fd9\u91cc\u968f\u673a\u751f\u6210\u7684 NodePort \u7aef\u53e3\u662f 32313\u3002 $ kubectl get svc -n argocd NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE argocd-dex-server ClusterIP 10.68.51.140 <none> 5556/TCP,5557/TCP,5558/TCP 5m11s argocd-metrics ClusterIP 10.68.76.255 <none> 8082/TCP 5m11s argocd-redis ClusterIP 10.68.223.131 <none> 6379/TCP 5m11s argocd-repo-server ClusterIP 10.68.1.35 <none> 8081/TCP,8084/TCP 5m11s argocd-server NodePort 10.68.49.24 <none> 80:30582/TCP,443:32313/TCP 5m11s argocd-server-metrics ClusterIP 10.68.107.188 <none> 8083/TCP 5m10s \u6d4f\u89c8\u5668\u8f93\u5165 https://<\u8282\u70b9 IP>:32313 \u8bbf\u95ee Argo CD\u3002 3.5 \u83b7\u53d6 Argo CD \u5bc6\u7801 \u9ed8\u8ba4\u60c5\u51b5\u4e0b admin \u5e10\u53f7\u7684\u521d\u59cb\u5bc6\u7801\u662f\u81ea\u52a8\u751f\u6210\u7684\uff0c\u4f1a\u4ee5\u660e\u6587\u7684\u5f62\u5f0f\u5b58\u50a8\u5728 Argo CD \u5b89\u88c5\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u540d\u4e3a argocd-initial-admin-secret \u7684 Secret \u5bf9\u8c61\u4e0b\u7684 password \u5b57\u6bb5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u6765\u83b7\u53d6\uff1a kubectl -n argocd get secret \\ argocd-initial-admin-secret \\ -o jsonpath=\"{.data.password}\" | base64 -d # \u8fd4\u56de\u7ed3\u679c kj8bDMiDTnsEfnjg \u5728\u6d4f\u89c8\u5668\u8f93\u5165\u5bc6\u7801\u767b\u5f55 Argo CD\u3002 \u767b\u5f55\u540e\u7684\u754c\u9762\u5982\u4e0b\u6240\u793a\u3002 \u547d\u4ee4\u884c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\u767b\u5f55\u3002 \u276f argocd login <\u8282\u70b9 IP>:32313 # \u63a5\u6536\u8bc1\u4e66\u98ce\u9669 WARNING: server certificate had error: x509: cannot validate certificate for 11.8.38.43 because it doesn't contain any IP SANs. Proceed insecurely (y/n)? y Username: # \u8f93\u5165\u7528\u6237\u540d Password: # \u8f93\u5165\u5bc6\u7801 'admin:login' logged in successfully 3.6 \u51c6\u5907 Git \u4ed3\u5e93 \u5728 Gitlab \u4e0a\u521b\u5efa\u9879\u76ee\uff0c\u53d6\u540d\u4e3a argocd-lab\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5b9e\u9a8c\u5c06\u4ed3\u5e93\u8bbe\u7f6e\u4e3a public \u516c\u5171\u4ed3\u5e93\u3002\u5728\u4ed3\u5e93\u4e2d\u521b\u5efa quickstart \u76ee\u5f55\uff0c\u5728\u76ee\u5f55\u4e2d\u521b\u5efa\u4e24\u4e2a yaml \u8d44\u6e90\u6587\u4ef6\uff0c\u5206\u522b\u662f myapp-deployment.yaml \u548c myapp-service.yaml\u3002 yaml \u8d44\u6e90\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a # myapp-deployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: myapp spec: replicas: 1 selector: matchLabels: app: myapp template: metadata: labels: app: myapp spec: containers: - image: registry.cn-shanghai.aliyuncs.com/public-namespace/myapp:v1 name: myapp ports: - containerPort: 80 # myapp-service.yaml apiVersion: v1 kind: Service metadata: name: myapp spec: ports: - port: 80 targetPort: 80 nodePort: 32060 type: NodePort selector: app: myapp \u5b9e\u9a8c\u6240\u9700\u7684\u955c\u50cf\u6211\u5df2\u7ecf\u5728\u963f\u91cc\u4e91\u7684\u955c\u50cf\u4ed3\u5e93\u4e2d\u51c6\u5907\u597d\u4e86\uff0c\u5927\u5bb6\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002 3.7 \u521b\u5efa Argo CD App \u9996\u5148\u521b\u5efa\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4 devops \u7528\u4e8e Argo CD \u90e8\u7f72\u5e94\u7528\u3002 kubectl create ns devops 3.7.1 \u65b9\u5f0f\u4e00\uff1a\u4f7f\u7528 UI \u521b\u5efa App Application Name: \u81ea\u5b9a\u4e49\u7684\u5e94\u7528\u540d\u3002 Project: \u4f7f\u7528\u9ed8\u8ba4\u521b\u5efa\u597d\u7684 default \u9879\u76ee\u3002 SYNC POLICY\uff1a \u540c\u6b65\u65b9\u5f0f\uff0c\u53ef\u4ee5\u9009\u62e9\u81ea\u52a8\u6216\u8005\u624b\u52a8\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u624b\u52a8\u540c\u6b65\u3002 Repository URL: \u9879\u76ee\u7684 Git \u5730\u5740\u3002 Revision: \u5206\u652f\u540d\u3002 Path: yaml \u8d44\u6e90\u6587\u4ef6\u6240\u5728\u7684\u76f8\u5bf9\u8def\u5f84\u3002 Cluster URL: Kubernetes API Server \u7684\u8bbf\u95ee\u5730\u5740\uff0c\u7531\u4e8e Argo CD \u548c\u4e0b\u53d1\u5e94\u7528\u7684 Kubernetes \u96c6\u7fa4\u662f\u540c\u4e00\u4e2a\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 https://kubernetes.default.svc \u6765\u8bbf\u95ee\u3002\u5173\u4e8e Kubernetes \u4e2d DNS \u89e3\u6790\u89c4\u5219\u53ef\u4ee5\u67e5\u770b Pod \u4e0e Service \u7684 DNS \u3002 Namespace: \u90e8\u7f72\u5e94\u7528\u7684\u547d\u540d\u7a7a\u95f4\u3002 \u521b\u5efa\u5b8c\u6210\u540e\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6b64\u65f6\u5904\u4e8e OutOfSync \u7684\u72b6\u6001\uff1a \u7531\u4e8e\u6211\u8bbe\u7f6e\u7684\u662f\u624b\u52a8\u540c\u6b65\uff0c\u56e0\u6b64\u9700\u8981\u70b9\u4e00\u4e0b\u4e0b\u9762\u7684 SYNC \u8fdb\u884c\u540c\u6b65\u3002 \u5728\u5f39\u51fa\u6846\u70b9\u51fb SYNCHRONIZE\uff0c\u786e\u8ba4\u540c\u6b65\u3002 \u7b49\u5f85\u540c\u6b65\u5b8c\u6210\u3002 \u5728 Argo CD \u4e0a\u70b9\u51fb\u5e94\u7528\u8fdb\u5165\u67e5\u770b\u8be6\u60c5\u3002 \u5728 Kubernetes \u67e5\u770b\u90e8\u7f72\u7684\u8d44\u6e90\u3002 root@cluster01-1:/root #kubectl get all -n devops NAME READY STATUS RESTARTS AGE pod/myapp-865f9f464f-qpjbc 1/1 Running 0 2m25s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/myapp NodePort 10.68.93.5 <none> 80:32060/TCP 2m25s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/myapp 1/1 1 1 2m25s NAME DESIRED CURRENT READY AGE replicaset.apps/myapp-865f9f464f 1 1 1 2m25s \u5728\u96c6\u7fa4\u5916\u90e8\u901a\u8fc7 <\u8282\u70b9 IP>:<NodePort> \u7aef\u53e3\u8bbf\u95ee myapp \u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u5230\u6b64\u65f6\u662f v1 \u7248\u672c\u3002 3.7.2 \u65b9\u5f0f\u4e8c\uff1a\u4f7f\u7528 CLI \u521b\u5efa APP argocd app create myapp2 \\ --repo http://11.8.36.29/root/argocd-lab.git \\ --path quickstart --dest-server \\ https://kubernetes.default.svc \\ --dest-namespace devops \u4f7f\u7528 argocd \u547d\u4ee4\u67e5\u770b\u521b\u5efa\u7684\u5e94\u7528\u3002 # \u5217\u51fa\u5e94\u7528 \u276f argocd app list NAME CLUSTER NAMESPACE PROJECT STATUS HEALTH SYNCPOLICY CONDITIONS REPO PATH TARGET myapp https://kubernetes.default.svc devops default Synced Healthy <none> <none> http://11.8.36.29/root/argocd-lab.git quickstart main # \u67e5\u770b myapp \u5e94\u7528 \u276f argocd app get myapp Name: myapp Project: default Server: https://kubernetes.default.svc Namespace: devops URL: https://11.8.36.159:32313/applications/myapp Repo: http://11.8.36.29/root/argocd-lab.git Target: main Path: quickstart SyncWindow: Sync Allowed Sync Policy: <none> Sync Status: Synced to main (82baed1) Health Status: Healthy GROUP KIND NAMESPACE NAME STATUS HEALTH HOOK MESSAGE Service devops myapp Synced Healthy service/myapp created apps Deployment devops myapp Synced Healthy deployment.apps/myapp created 3.7.3 \u65b9\u5f0f\u4e09\uff1a\u4f7f\u7528 YAML \u6587\u4ef6\u521b\u5efa apiVersion: argoproj.io/v1alpha1 kind: Application metadata: name: myapp namespace: argocd spec: destination: namespace: devops # \u90e8\u7f72\u5e94\u7528\u7684\u547d\u540d\u7a7a\u95f4 server: https://kubernetes.default.svc # API Server \u5730\u5740 project: default # \u9879\u76ee\u540d source: path: quickstart # \u8d44\u6e90\u6587\u4ef6\u8def\u5f84 repoURL: http://11.8.36.29/root/argocd-lab.git # Git \u4ed3\u5e93\u5730\u5740 targetRevision: main # \u5206\u652f\u540d 3.8 \u7248\u672c\u5347\u7ea7 \u8fd9\u6b21\u6211\u4eec\u5c06 myapp \u5e94\u7528\u4ece\u624b\u52a8\u540c\u6b65\u6539\u6210\u81ea\u52a8\u540c\u6b65\u3002\u70b9\u51fb APP DETAILS -> SYNC POLICY\uff0c\u70b9\u51fb ENABLE AUTO-SYNC\u3002 \u7f16\u8f91 myapp \u8d44\u6e90\u6587\u4ef6\uff0c\u5c06\u7248\u672c\u4ece v1 \u6539\u4e3a v2\uff0c\u70b9\u51fb Commit changes\uff0c\u63d0\u4ea4\u66f4\u6539\u3002 \u7b49\u5f85\u4e00\u4f1a Argo CD \u4f1a\u81ea\u52a8\u66f4\u65b0\u5e94\u7528\uff0c\u5982\u679c\u4f60\u7b49\u4e0d\u53ca\u53ef\u4ee5\u70b9\u51fb Refresh\uff0cArgo CD \u4f1a\u53bb\u7acb\u5373\u83b7\u53d6\u6700\u65b0\u7684\u8d44\u6e90\u6587\u4ef6\u3002\u53ef\u4ee5\u770b\u5230\u6b64\u65f6 myapp Deployment \u4f1a\u65b0\u521b\u5efa v2 \u7248\u672c\u7684 Replicaset\uff0cv2 \u7248\u672c\u7684 Replicaset \u4f1a\u521b\u5efa\u5e76\u7ba1\u7406 v2 \u7248\u672c\u7684 Pod\u3002 \u5728\u96c6\u7fa4\u5916\u90e8\u901a\u8fc7 <\u8282\u70b9 IP>:<NodePort> \u7aef\u53e3\u8bbf\u95ee myapp \u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u5230\u6b64\u65f6\u662f v2 \u7248\u672c\u3002 3.9 \u7248\u672c\u56de\u6eda \u7ec6\u5fc3\u7684\u540c\u5b66\u5e94\u8be5\u4f1a\u53d1\u73b0\u5347\u7ea7\u5230 v2 \u7248\u672c\u4ee5\u540e\uff0c v1 \u7248\u672c\u7684 Replicaset \u5e76\u6ca1\u6709\u88ab\u5220\u9664\uff0c\u800c\u662f\u7ee7\u7eed\u4fdd\u7559\uff0c\u8fd9\u662f\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u56de\u6eda\u5e94\u7528\u3002\u5728 myapp \u5e94\u7528\u4e2d\u70b9\u51fb HISTORY AND ROLLBACK \u67e5\u770b\u5386\u53f2\u8bb0\u5f55\uff0c\u53ef\u4ee5\u770b\u5230\u6709 2 \u4e2a\u5386\u53f2\u8bb0\u5f55\u3002 \u5047\u8bbe\u6211\u4eec\u521a\u521a\u4e0a\u7ebf\u7684 v2 \u7248\u672c\u51fa\u73b0\u4e86\u95ee\u9898\uff0c\u9700\u8981\u56de\u6eda\u56de v1 \u7248\u672c\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u9009\u4e2d v1 \u7248\u672c\uff0c\u7136\u540e\u70b9\u51fb Rollback \u8fdb\u884c\u56de\u6eda\u3002 \u5728\u56de\u6eda\u7684\u65f6\u5019\u9700\u8981\u7981\u7528 AUTO-SYNC \u81ea\u52a8\u540c\u6b65\uff0c\u70b9\u51fb OK \u786e\u8ba4\u5373\u53ef\u3002 \u7b49\u5f85\u4e00\u4f1a\u53ef\u4ee5\u770b\u5230\u6b64\u65f6\u5df2\u7ecf\u56de\u6eda\u6210\u529f\uff0c\u6b64\u65f6 Pod \u662f v1 \u7248\u672c\u7684\uff0c\u5e76\u4e14\u7531\u4e8e\u6b64\u65f6\u7ebf\u4e0a\u7684\u7248\u672c\u5e76\u4e0d\u662f Git \u4ed3\u5e93\u4e2d\u6700\u65b0\u7684\u7248\u672c\uff0c\u56e0\u6b64\u6b64\u65f6\u540c\u6b65\u72b6\u6001\u662f OutOfSync\u3002 4 \u53c2\u8003\u8d44\u6599 Argo CD \u5b98\u65b9\u6587\u6863 GitOps \u6301\u7eed\u90e8\u7f72\u5de5\u5177 Argo CD \u521d\u4f53\u9a8c Argo CD \u4f7f\u7528\u6307\u5357 \u4f7f\u7528 GitLab CI \u4e0e Argo CD \u8fdb\u884c GitOps \u5b9e\u8df5 \u5728K8S\u4e2d\u4f7f\u7528Argo CD\u505a\u6301\u7eed\u90e8\u7f72 Pod \u4e0e Service \u7684 DNS 2021\u5e7425\u4f73DevOps\u5de5\u5177, \u4f60\u7528\u4e86\u51e0\u4e2a \u5fae\u670d\u52a1 CI/CD \u5b9e\u8df5-GitOps \u5b8c\u6574\u8bbe\u8ba1\u4e0e\u5b9e\u73b0 FluxCD, ArgoCD or Jenkins X: Which Is the Right GitOps Tool for You? CI/CD\u662f\u4ec0\u4e48\uff1f\u5982\u4f55\u7406\u89e3\u6301\u7eed\u96c6\u6210\u3001\u6301\u7eed\u4ea4\u4ed8\u548c\u6301\u7eed\u90e8\u7f72 \u5f53\u4e0b\u6700\u70ed\u95e8\u7684 GitOps\uff0c\u4f60\u4e86\u89e3\u5417\uff1f GitOps \u5e94\u7528\u5b9e\u8df5\u7cfb\u5217 - \u7efc\u8ff0","title":"ArgoCD \u7b80\u660e\u6559\u7a0b"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/ArgoCD%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#argocd","text":"","title":"ArgoCD \u7b80\u660e\u6559\u7a0b"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/ArgoCD%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#1-argo-cd","text":"Argo CD \u662f\u4e00\u4e2a\u4e3a Kubernetes \u800c\u751f\u7684\uff0c\u9075\u5faa\u58f0\u660e\u5f0f GitOps \u7406\u5ff5\u7684\u6301\u7eed\u90e8\u7f72\uff08CD\uff09\u5de5\u5177\uff0c\u5b83\u7684\u914d\u7f6e\u548c\u4f7f\u7528\u975e\u5e38\u7b80\u5355\uff0c\u5e76\u4e14\u81ea\u5e26\u4e00\u4e2a\u7b80\u5355\u6613\u7528\u7684 Dashboard \u9875\u9762\uff0c\u5e76\u4e14\u652f\u6301\u591a\u79cd\u914d\u7f6e\u7ba1\u7406/\u6a21\u677f\u5de5\u5177\uff08\u4f8b\u5982 Kustomize\u3001Helm\u3001Ksonnet\u3001Jsonnet\u3001plain-YAML\uff09\u3002 Argo CD \u88ab\u5b9e\u73b0\u4e3a\u4e00\u4e2a Kubernetes \u63a7\u5236\u5668\uff0c\u5b83\u6301\u7eed\u76d1\u63a7\u6b63\u5728\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u5e76\u5c06\u5f53\u524d\u7684\u5b9e\u65f6\u72b6\u6001\u4e0e\u6240\u9700\u7684\u76ee\u6807\u72b6\u6001\uff08\u4f8b\u5982 Git \u4ed3\u5e93\u4e2d\u7684\u914d\u7f6e\uff09\u8fdb\u884c\u6bd4\u8f83\uff0c\u5728 Git \u4ed3\u5e93\u66f4\u6539\u65f6\u81ea\u52a8\u540c\u6b65\u548c\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u3002","title":"1 Argo CD \u7b80\u4ecb"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/ArgoCD%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#2","text":"Argo CD \u5728 CI/CD \u6d41\u7a0b\u4e2d\u7684\u4f4d\u7f6e\u5982\u4e0b\u56fe\u6240\u793a\uff0cArgo CD \u7684\u4e3b\u8981\u804c\u8d23\u662f CD\uff08Continuous Delivery\uff0c\u6301\u7eed\u4ea4\u4ed8\uff09\uff0c\u5c06\u5e94\u7528\u90e8\u7f72\u5230 Kubernetes \u7b49\u73af\u5883\u4e2d\uff0c\u800c CI\uff08Continuous Integration\uff0c\u6301\u7eed\u96c6\u6210\uff09\u4e3b\u8981\u662f\u4ea4\u7ed9 Jenkins\uff0cGitlab CI \u7b49\u5de5\u5177\u6765\u5b8c\u6210\u3002 \u8fd9\u91cc\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b GitOps \u7684\u6982\u5ff5\uff0cGitOps \u8fd9\u4e2a\u8bcd\u51fa\u73b0\u4e8e 2017 \u5e74\uff0c\u662f\u7531 Weaveworks \u516c\u53f8\u6839\u636e\u591a\u5e74\u4e91\u8ba1\u7b97\u57fa\u7840\u8bbe\u65bd\u548c\u5e94\u7528\u7a0b\u5e8f\u7ba1\u7406\u7ecf\u9a8c\u800c\u63d0\u51fa\u7684\u4e00\u4e2a\u6982\u5ff5\uff0c\u5b83\u662f\u4e00\u79cd\u8fdb\u884c Kubernetes \u96c6\u7fa4\u7ba1\u7406\u548c\u5e94\u7528\u7a0b\u5e8f\u4ea4\u4ed8\u7684\u65b9\u5f0f\uff0cGitOps \u4f7f\u7528 Git \u4f5c\u4e3a\u58f0\u660e\u6027\u57fa\u7840\u8bbe\u65bd\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u5355\u4e00\u4e8b\u5b9e\u6765\u6e90\u3002 GitOps \u7684\u6838\u5fc3\u601d\u60f3\u662f\u62e5\u6709\u4e00\u4e2a Git \u4ed3\u5e93\uff0c\u5305\u542b\u76ee\u6807\u73af\u5883\u4e2d\u5f53\u524d\u6240\u9700\u57fa\u7840\u8bbe\u65bd\u7684 \u58f0\u660e\u6027 \u63cf\u8ff0\uff0c\u4ee5\u53ca\u4f7f\u76ee\u6807\u73af\u5883\u4e0e Git \u4ed3\u5e93\u4e2d\u63cf\u8ff0\u7684\u72b6\u6001\u76f8\u5339\u914d\u7684\u81ea\u52a8\u5316\u8fc7\u7a0b\uff0cArgo CD \u5c31\u662f\u4e00\u4e2a\u9075\u5faa\u4e86 GitOps \u7406\u5ff5\u7684\u6301\u7eed\u90e8\u7f72\uff08CD\uff09\u5de5\u5177\u3002 \u5728 GitOps \u6a21\u5f0f\u7684 CI/CD \u6d41\u6c34\u7ebf\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u6d41\u7a0b\uff1a - 1.\u5c06\u5e94\u7528\u7684 Git \u4ed3\u5e93\u5206\u4e3a Application Deployment file \u548c Docker file \u4e24\u4e2a\u5e93\u3002 Docker file \u7528\u4e8e\u5b58\u653e\u5e94\u7528\u7684\u6838\u5fc3\u4ee3\u7801\u4ee5\u53ca Docker build file\uff0c\u540e\u7eed\u5c06\u4f1a\u76f4\u63a5\u6253\u5305\u6210 Docker image\uff1bApplication Deployment file \u53ef\u4ee5 Kustomize\u3001Helm\u3001Ksconnet\u3001Jsonnet \u7b49\u591a\u79cd Kubernetes \u5305\u7ba1\u7406\u5de5\u5177\u6765\u5b9a\u4e49\uff1b\u4ee5 Helm \u4e3a\u4f8b\uff0cChart \u4e2d\u6240\u4f7f\u7528\u5230\u7684 Image \u7531 Docker file Code \u6253\u5305\u5b8c\u6210\u540e\u63d0\u4f9b\u3002 - 2.\u4f7f\u7528 Jenkins \u6216 Gitlab \u7b49 CI \u5de5\u5177\u8fdb\u884c\u81ea\u52a8\u5316\u6784\u5efa\u6253\u5305\uff0c\u5e76\u5c06 Docker image push \u5230 Harbor \u955c\u50cf\u4ed3\u5e93\u3002 - 3.\u4f7f\u7528 Argo CD \u90e8\u7f72\u5e94\u7528\u3002Argo CD \u53ef\u4ee5\u72ec\u7acb\u4e8e\u96c6\u7fa4\u4e4b\u5916\uff0c\u5e76\u4e14\u652f\u6301\u7ba1\u7406\u591a\u4e2a Kubernetes \u96c6\u7fa4\u3002\u5728 Argo CD \u4e0a\u914d\u7f6e\u597d\u5e94\u7528\u90e8\u7f72\u7684\u76f8\u5173\u4fe1\u606f\u540e Argo CD \u4fbf\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0cArgo CD \u4f1a\u81ea\u52a8\u548c\u4ee3\u7801\u4ed3\u5e93 Application deployment file \u7684\u5185\u5bb9\u8fdb\u884c\u6821\u9a8c\uff0c\u5f53\u4ee3\u7801\u4ed3\u5e93\u4e2d\u5e94\u7528\u5c5e\u6027\u7b49\u4fe1\u606f\u53d1\u751f\u53d8\u5316\u65f6\uff0cArgo CD \u4f1a\u81ea\u52a8\u540c\u6b65\u66f4\u65b0 Kubernetes \u96c6\u7fa4\u4e2d\u7684\u5e94\u7528\uff1b\u5e94\u7528\u542f\u52a8\u65f6\uff0c\u4f1a\u4ece Harbor \u955c\u50cf\u4ed3\u5e93\u62c9\u53d6 Docker image\u3002 \u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u7b2c 3 \u90e8\u5206 Argo CD \u90e8\u7f72\u5e94\u7528\uff0c\u5173\u4e8e GitOps \u7684\u5b8c\u6574\u5b9e\u8df5\u540e\u7eed\u4f1a\u53d1\u6587\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"2 \u67b6\u6784\u56fe"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/ArgoCD%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#3","text":"","title":"3 \u5feb\u901f\u5f00\u59cb"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/ArgoCD%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#31","text":"1.\u51c6\u5907\u597d\u4e00\u5957 Kubernetes \u96c6\u7fa4\uff0c\u53c2\u89c1 \u4f7f\u7528 ezctl \u5de5\u5177\u90e8\u7f72\u548c\u7ba1\u7406 Kubernetes \u96c6\u7fa4 \u3002 2.\u642d\u5efa\u597d Gitlab \u4ee3\u7801\u4ed3\u5e93\uff0c\u53c2\u89c1 Gitlab \u5b89\u88c5\u6307\u5357 \u3002","title":"3.1 \u524d\u63d0\u6761\u4ef6"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/ArgoCD%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#32-argo-cd","text":"\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5728 argocd \u547d\u540d\u7a7a\u95f4\u90e8\u7f72 Argo CD\u3002 # \u521b\u5efa\u547d\u540d\u7a7a\u95f4 kubectl create namespace argocd # \u90e8\u7f72 argo cd wget https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml kubectl apply -n argocd -f install.yaml","title":"3.2 \u5b89\u88c5 Argo CD"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/ArgoCD%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#33-argo-cd-cli","text":"Argo CD CLI \u662f\u7528\u4e8e\u7ba1\u7406 Argo CD \u7684\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u4e0d\u540c\u64cd\u4f5c\u7cfb\u7edf\u5177\u4f53\u7684\u5b89\u88c5\u65b9\u5f0f\u53ef\u4ee5\u53c2\u8003 Argo CD CLI Installation Mac \u7cfb\u7edf\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 brew install \u8fdb\u884c\u5b89\u88c5\u3002 brew install argocd","title":"3.3 \u5b89\u88c5 Argo CD CLI"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/ArgoCD%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#34-argo-cd","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c Argo CD \u670d\u52a1\u4e0d\u5bf9\u5916\u66b4\u9732\u670d\u52a1\uff0c\u53ef\u4ee5\u901a\u8fc7 LoadBalancer \u6216\u8005 NodePort \u7c7b\u578b\u7684 Service\u3001Ingress\u3001Kubectl \u7aef\u53e3\u8f6c\u53d1\u7b49\u65b9\u5f0f\u5c06 Argo CD \u670d\u52a1\u53d1\u5e03\u5230 Kubernetes \u96c6\u7fa4\u5916\u90e8\u3002 \u8fd9\u91cc\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u901a\u8fc7 NodePort \u670d\u52a1\u7684\u65b9\u5f0f\u66b4\u9732 Argo CD \u5230\u96c6\u7fa4\u5916\u90e8\u3002 kubectl patch svc argocd-server -n argocd -p '{\"spec\": {\"type\": \"NodePort\"}}' \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u5c06\u540d\u5b57\u4e3a argocd-server \u7684 Service \u6539\u6210 NodePort \u7c7b\u578b\u4e86\uff0c\u53ef\u4ee5\u5728\u96c6\u7fa4\u5916\u90e8\u901a\u8fc7 <\u8282\u70b9 IP>:<\u968f\u673a\u751f\u6210\u7684 NodePort \u7aef\u53e3> \u6765\u8bbf\u95ee Argo CD\uff0c\u6211\u8fd9\u91cc\u968f\u673a\u751f\u6210\u7684 NodePort \u7aef\u53e3\u662f 32313\u3002 $ kubectl get svc -n argocd NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE argocd-dex-server ClusterIP 10.68.51.140 <none> 5556/TCP,5557/TCP,5558/TCP 5m11s argocd-metrics ClusterIP 10.68.76.255 <none> 8082/TCP 5m11s argocd-redis ClusterIP 10.68.223.131 <none> 6379/TCP 5m11s argocd-repo-server ClusterIP 10.68.1.35 <none> 8081/TCP,8084/TCP 5m11s argocd-server NodePort 10.68.49.24 <none> 80:30582/TCP,443:32313/TCP 5m11s argocd-server-metrics ClusterIP 10.68.107.188 <none> 8083/TCP 5m10s \u6d4f\u89c8\u5668\u8f93\u5165 https://<\u8282\u70b9 IP>:32313 \u8bbf\u95ee Argo CD\u3002","title":"3.4 \u53d1\u5e03 Argo CD \u670d\u52a1"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/ArgoCD%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#35-argo-cd","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b admin \u5e10\u53f7\u7684\u521d\u59cb\u5bc6\u7801\u662f\u81ea\u52a8\u751f\u6210\u7684\uff0c\u4f1a\u4ee5\u660e\u6587\u7684\u5f62\u5f0f\u5b58\u50a8\u5728 Argo CD \u5b89\u88c5\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\u540d\u4e3a argocd-initial-admin-secret \u7684 Secret \u5bf9\u8c61\u4e0b\u7684 password \u5b57\u6bb5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u6765\u83b7\u53d6\uff1a kubectl -n argocd get secret \\ argocd-initial-admin-secret \\ -o jsonpath=\"{.data.password}\" | base64 -d # \u8fd4\u56de\u7ed3\u679c kj8bDMiDTnsEfnjg \u5728\u6d4f\u89c8\u5668\u8f93\u5165\u5bc6\u7801\u767b\u5f55 Argo CD\u3002 \u767b\u5f55\u540e\u7684\u754c\u9762\u5982\u4e0b\u6240\u793a\u3002 \u547d\u4ee4\u884c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u65b9\u5f0f\u767b\u5f55\u3002 \u276f argocd login <\u8282\u70b9 IP>:32313 # \u63a5\u6536\u8bc1\u4e66\u98ce\u9669 WARNING: server certificate had error: x509: cannot validate certificate for 11.8.38.43 because it doesn't contain any IP SANs. Proceed insecurely (y/n)? y Username: # \u8f93\u5165\u7528\u6237\u540d Password: # \u8f93\u5165\u5bc6\u7801 'admin:login' logged in successfully","title":"3.5 \u83b7\u53d6 Argo CD \u5bc6\u7801"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/ArgoCD%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#36-git","text":"\u5728 Gitlab \u4e0a\u521b\u5efa\u9879\u76ee\uff0c\u53d6\u540d\u4e3a argocd-lab\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5b9e\u9a8c\u5c06\u4ed3\u5e93\u8bbe\u7f6e\u4e3a public \u516c\u5171\u4ed3\u5e93\u3002\u5728\u4ed3\u5e93\u4e2d\u521b\u5efa quickstart \u76ee\u5f55\uff0c\u5728\u76ee\u5f55\u4e2d\u521b\u5efa\u4e24\u4e2a yaml \u8d44\u6e90\u6587\u4ef6\uff0c\u5206\u522b\u662f myapp-deployment.yaml \u548c myapp-service.yaml\u3002 yaml \u8d44\u6e90\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a # myapp-deployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: myapp spec: replicas: 1 selector: matchLabels: app: myapp template: metadata: labels: app: myapp spec: containers: - image: registry.cn-shanghai.aliyuncs.com/public-namespace/myapp:v1 name: myapp ports: - containerPort: 80 # myapp-service.yaml apiVersion: v1 kind: Service metadata: name: myapp spec: ports: - port: 80 targetPort: 80 nodePort: 32060 type: NodePort selector: app: myapp \u5b9e\u9a8c\u6240\u9700\u7684\u955c\u50cf\u6211\u5df2\u7ecf\u5728\u963f\u91cc\u4e91\u7684\u955c\u50cf\u4ed3\u5e93\u4e2d\u51c6\u5907\u597d\u4e86\uff0c\u5927\u5bb6\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002","title":"3.6 \u51c6\u5907 Git \u4ed3\u5e93"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/ArgoCD%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#37-argo-cd-app","text":"\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4 devops \u7528\u4e8e Argo CD \u90e8\u7f72\u5e94\u7528\u3002 kubectl create ns devops","title":"3.7 \u521b\u5efa Argo CD App"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/ArgoCD%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#371-ui-app","text":"Application Name: \u81ea\u5b9a\u4e49\u7684\u5e94\u7528\u540d\u3002 Project: \u4f7f\u7528\u9ed8\u8ba4\u521b\u5efa\u597d\u7684 default \u9879\u76ee\u3002 SYNC POLICY\uff1a \u540c\u6b65\u65b9\u5f0f\uff0c\u53ef\u4ee5\u9009\u62e9\u81ea\u52a8\u6216\u8005\u624b\u52a8\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u624b\u52a8\u540c\u6b65\u3002 Repository URL: \u9879\u76ee\u7684 Git \u5730\u5740\u3002 Revision: \u5206\u652f\u540d\u3002 Path: yaml \u8d44\u6e90\u6587\u4ef6\u6240\u5728\u7684\u76f8\u5bf9\u8def\u5f84\u3002 Cluster URL: Kubernetes API Server \u7684\u8bbf\u95ee\u5730\u5740\uff0c\u7531\u4e8e Argo CD \u548c\u4e0b\u53d1\u5e94\u7528\u7684 Kubernetes \u96c6\u7fa4\u662f\u540c\u4e00\u4e2a\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 https://kubernetes.default.svc \u6765\u8bbf\u95ee\u3002\u5173\u4e8e Kubernetes \u4e2d DNS \u89e3\u6790\u89c4\u5219\u53ef\u4ee5\u67e5\u770b Pod \u4e0e Service \u7684 DNS \u3002 Namespace: \u90e8\u7f72\u5e94\u7528\u7684\u547d\u540d\u7a7a\u95f4\u3002 \u521b\u5efa\u5b8c\u6210\u540e\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6b64\u65f6\u5904\u4e8e OutOfSync \u7684\u72b6\u6001\uff1a \u7531\u4e8e\u6211\u8bbe\u7f6e\u7684\u662f\u624b\u52a8\u540c\u6b65\uff0c\u56e0\u6b64\u9700\u8981\u70b9\u4e00\u4e0b\u4e0b\u9762\u7684 SYNC \u8fdb\u884c\u540c\u6b65\u3002 \u5728\u5f39\u51fa\u6846\u70b9\u51fb SYNCHRONIZE\uff0c\u786e\u8ba4\u540c\u6b65\u3002 \u7b49\u5f85\u540c\u6b65\u5b8c\u6210\u3002 \u5728 Argo CD \u4e0a\u70b9\u51fb\u5e94\u7528\u8fdb\u5165\u67e5\u770b\u8be6\u60c5\u3002 \u5728 Kubernetes \u67e5\u770b\u90e8\u7f72\u7684\u8d44\u6e90\u3002 root@cluster01-1:/root #kubectl get all -n devops NAME READY STATUS RESTARTS AGE pod/myapp-865f9f464f-qpjbc 1/1 Running 0 2m25s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/myapp NodePort 10.68.93.5 <none> 80:32060/TCP 2m25s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/myapp 1/1 1 1 2m25s NAME DESIRED CURRENT READY AGE replicaset.apps/myapp-865f9f464f 1 1 1 2m25s \u5728\u96c6\u7fa4\u5916\u90e8\u901a\u8fc7 <\u8282\u70b9 IP>:<NodePort> \u7aef\u53e3\u8bbf\u95ee myapp \u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u5230\u6b64\u65f6\u662f v1 \u7248\u672c\u3002","title":"3.7.1 \u65b9\u5f0f\u4e00\uff1a\u4f7f\u7528 UI \u521b\u5efa App"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/ArgoCD%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#372-cli-app","text":"argocd app create myapp2 \\ --repo http://11.8.36.29/root/argocd-lab.git \\ --path quickstart --dest-server \\ https://kubernetes.default.svc \\ --dest-namespace devops \u4f7f\u7528 argocd \u547d\u4ee4\u67e5\u770b\u521b\u5efa\u7684\u5e94\u7528\u3002 # \u5217\u51fa\u5e94\u7528 \u276f argocd app list NAME CLUSTER NAMESPACE PROJECT STATUS HEALTH SYNCPOLICY CONDITIONS REPO PATH TARGET myapp https://kubernetes.default.svc devops default Synced Healthy <none> <none> http://11.8.36.29/root/argocd-lab.git quickstart main # \u67e5\u770b myapp \u5e94\u7528 \u276f argocd app get myapp Name: myapp Project: default Server: https://kubernetes.default.svc Namespace: devops URL: https://11.8.36.159:32313/applications/myapp Repo: http://11.8.36.29/root/argocd-lab.git Target: main Path: quickstart SyncWindow: Sync Allowed Sync Policy: <none> Sync Status: Synced to main (82baed1) Health Status: Healthy GROUP KIND NAMESPACE NAME STATUS HEALTH HOOK MESSAGE Service devops myapp Synced Healthy service/myapp created apps Deployment devops myapp Synced Healthy deployment.apps/myapp created","title":"3.7.2 \u65b9\u5f0f\u4e8c\uff1a\u4f7f\u7528 CLI \u521b\u5efa APP"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/ArgoCD%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#373-yaml","text":"apiVersion: argoproj.io/v1alpha1 kind: Application metadata: name: myapp namespace: argocd spec: destination: namespace: devops # \u90e8\u7f72\u5e94\u7528\u7684\u547d\u540d\u7a7a\u95f4 server: https://kubernetes.default.svc # API Server \u5730\u5740 project: default # \u9879\u76ee\u540d source: path: quickstart # \u8d44\u6e90\u6587\u4ef6\u8def\u5f84 repoURL: http://11.8.36.29/root/argocd-lab.git # Git \u4ed3\u5e93\u5730\u5740 targetRevision: main # \u5206\u652f\u540d","title":"3.7.3 \u65b9\u5f0f\u4e09\uff1a\u4f7f\u7528 YAML \u6587\u4ef6\u521b\u5efa"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/ArgoCD%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#38","text":"\u8fd9\u6b21\u6211\u4eec\u5c06 myapp \u5e94\u7528\u4ece\u624b\u52a8\u540c\u6b65\u6539\u6210\u81ea\u52a8\u540c\u6b65\u3002\u70b9\u51fb APP DETAILS -> SYNC POLICY\uff0c\u70b9\u51fb ENABLE AUTO-SYNC\u3002 \u7f16\u8f91 myapp \u8d44\u6e90\u6587\u4ef6\uff0c\u5c06\u7248\u672c\u4ece v1 \u6539\u4e3a v2\uff0c\u70b9\u51fb Commit changes\uff0c\u63d0\u4ea4\u66f4\u6539\u3002 \u7b49\u5f85\u4e00\u4f1a Argo CD \u4f1a\u81ea\u52a8\u66f4\u65b0\u5e94\u7528\uff0c\u5982\u679c\u4f60\u7b49\u4e0d\u53ca\u53ef\u4ee5\u70b9\u51fb Refresh\uff0cArgo CD \u4f1a\u53bb\u7acb\u5373\u83b7\u53d6\u6700\u65b0\u7684\u8d44\u6e90\u6587\u4ef6\u3002\u53ef\u4ee5\u770b\u5230\u6b64\u65f6 myapp Deployment \u4f1a\u65b0\u521b\u5efa v2 \u7248\u672c\u7684 Replicaset\uff0cv2 \u7248\u672c\u7684 Replicaset \u4f1a\u521b\u5efa\u5e76\u7ba1\u7406 v2 \u7248\u672c\u7684 Pod\u3002 \u5728\u96c6\u7fa4\u5916\u90e8\u901a\u8fc7 <\u8282\u70b9 IP>:<NodePort> \u7aef\u53e3\u8bbf\u95ee myapp \u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u5230\u6b64\u65f6\u662f v2 \u7248\u672c\u3002","title":"3.8 \u7248\u672c\u5347\u7ea7"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/ArgoCD%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#39","text":"\u7ec6\u5fc3\u7684\u540c\u5b66\u5e94\u8be5\u4f1a\u53d1\u73b0\u5347\u7ea7\u5230 v2 \u7248\u672c\u4ee5\u540e\uff0c v1 \u7248\u672c\u7684 Replicaset \u5e76\u6ca1\u6709\u88ab\u5220\u9664\uff0c\u800c\u662f\u7ee7\u7eed\u4fdd\u7559\uff0c\u8fd9\u662f\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u56de\u6eda\u5e94\u7528\u3002\u5728 myapp \u5e94\u7528\u4e2d\u70b9\u51fb HISTORY AND ROLLBACK \u67e5\u770b\u5386\u53f2\u8bb0\u5f55\uff0c\u53ef\u4ee5\u770b\u5230\u6709 2 \u4e2a\u5386\u53f2\u8bb0\u5f55\u3002 \u5047\u8bbe\u6211\u4eec\u521a\u521a\u4e0a\u7ebf\u7684 v2 \u7248\u672c\u51fa\u73b0\u4e86\u95ee\u9898\uff0c\u9700\u8981\u56de\u6eda\u56de v1 \u7248\u672c\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u9009\u4e2d v1 \u7248\u672c\uff0c\u7136\u540e\u70b9\u51fb Rollback \u8fdb\u884c\u56de\u6eda\u3002 \u5728\u56de\u6eda\u7684\u65f6\u5019\u9700\u8981\u7981\u7528 AUTO-SYNC \u81ea\u52a8\u540c\u6b65\uff0c\u70b9\u51fb OK \u786e\u8ba4\u5373\u53ef\u3002 \u7b49\u5f85\u4e00\u4f1a\u53ef\u4ee5\u770b\u5230\u6b64\u65f6\u5df2\u7ecf\u56de\u6eda\u6210\u529f\uff0c\u6b64\u65f6 Pod \u662f v1 \u7248\u672c\u7684\uff0c\u5e76\u4e14\u7531\u4e8e\u6b64\u65f6\u7ebf\u4e0a\u7684\u7248\u672c\u5e76\u4e0d\u662f Git \u4ed3\u5e93\u4e2d\u6700\u65b0\u7684\u7248\u672c\uff0c\u56e0\u6b64\u6b64\u65f6\u540c\u6b65\u72b6\u6001\u662f OutOfSync\u3002","title":"3.9 \u7248\u672c\u56de\u6eda"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/DevOps/ArgoCD%20%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#4","text":"Argo CD \u5b98\u65b9\u6587\u6863 GitOps \u6301\u7eed\u90e8\u7f72\u5de5\u5177 Argo CD \u521d\u4f53\u9a8c Argo CD \u4f7f\u7528\u6307\u5357 \u4f7f\u7528 GitLab CI \u4e0e Argo CD \u8fdb\u884c GitOps \u5b9e\u8df5 \u5728K8S\u4e2d\u4f7f\u7528Argo CD\u505a\u6301\u7eed\u90e8\u7f72 Pod \u4e0e Service \u7684 DNS 2021\u5e7425\u4f73DevOps\u5de5\u5177, \u4f60\u7528\u4e86\u51e0\u4e2a \u5fae\u670d\u52a1 CI/CD \u5b9e\u8df5-GitOps \u5b8c\u6574\u8bbe\u8ba1\u4e0e\u5b9e\u73b0 FluxCD, ArgoCD or Jenkins X: Which Is the Right GitOps Tool for You? CI/CD\u662f\u4ec0\u4e48\uff1f\u5982\u4f55\u7406\u89e3\u6301\u7eed\u96c6\u6210\u3001\u6301\u7eed\u4ea4\u4ed8\u548c\u6301\u7eed\u90e8\u7f72 \u5f53\u4e0b\u6700\u70ed\u95e8\u7684 GitOps\uff0c\u4f60\u4e86\u89e3\u5417\uff1f GitOps \u5e94\u7528\u5b9e\u8df5\u7cfb\u5217 - \u7efc\u8ff0","title":"4 \u53c2\u8003\u8d44\u6599"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/","text":"\u5728 Kubernetes \u4e2d\u4f7f\u7528 Keycloak OIDC Provider \u5bf9\u7528\u6237\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1 API Server \u4f5c\u4e3a Kubernetes \u7684\u7f51\u5173\uff0c\u662f\u7528\u6237\u8bbf\u95ee\u548c\u7ba1\u7406\u8d44\u6e90\u5bf9\u8c61\u7684\u5165\u53e3\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u8bbf\u95ee\u8bf7\u6c42\uff0c API Server \u90fd\u9700\u8981\u5bf9\u8bbf\u95ee\u8005\u7684\u5408\u6cd5\u6027\u8fdb\u884c\u68c0\u67e5\uff0c\u5305\u62ec\u8eab\u4efd\u9a8c\u8bc1\u3001\u6743\u9650\u9a8c\u8bc1\u7b49\u7b49\u3002Kubernetes \u652f\u6301\u591a\u79cd\u8eab\u4efd\u9a8c\u8bc1\u7684\u65b9\u5f0f\uff0c\u672c\u6587\u5c06\u5bf9 OpenID Connect \u8ba4\u8bc1\u8fdb\u884c\u4ecb\u7ecd\u3002 1 OpenID Connect\uff08OIDC\uff09\u4ecb\u7ecd OAuth\uff08Open Authorization\uff09\u662f\u4e00\u4e2a\u5173\u4e8e\u6388\u6743\uff08authorization\uff09\u7684\u5f00\u653e\u7f51\u7edc\u6807\u51c6\uff0c\u5141\u8bb8\u7528\u6237\u6388\u6743\u7b2c\u4e09\u65b9\u5e94\u7528\u8bbf\u95ee\u4ed6\u4eec\u5b58\u50a8\u5728\u5176\u4ed6\u670d\u52a1\u63d0\u4f9b\u8005\u4e0a\u7684\u4fe1\u606f\uff0c\u800c\u4e0d\u9700\u8981\u5c06\u7528\u6237\u540d\u548c\u5bc6\u7801\u63d0\u4f9b\u7ed9\u7b2c\u4e09\u65b9\u5e94\u7528\u3002OAuth \u5728\u5168\u4e16\u754c\u5f97\u5230\u4e86\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u76ee\u524d\u7684\u7248\u672c\u662f 2.0 \u3002 OpenID Connect (OIDC) \u662f\u4e00\u79cd\u8eab\u4efd\u9a8c\u8bc1\u534f\u8bae\uff0c\u57fa\u4e8e OAuth 2.0 \u7cfb\u5217\u89c4\u8303\u3002OAuth2 \u63d0\u4f9b\u4e86 access_token \u6765\u89e3\u51b3\u6388\u6743\u7b2c\u4e09\u65b9\u5ba2\u6237\u7aef\u8bbf\u95ee\u53d7\u4fdd\u62a4\u8d44\u6e90\u7684\u95ee\u9898\uff0cOpenID Connect \u5728\u8fd9\u4e2a\u57fa\u7840\u4e0a\u63d0\u4f9b\u4e86 id_token \u6765\u89e3\u51b3\u7b2c\u4e09\u65b9\u5ba2\u6237\u7aef \u6807\u8bc6\u7528\u6237\u8eab\u4efd \u7684\u95ee\u9898\u3002 OpenID Connect \u7684\u6838\u5fc3\u5728\u4e8e\uff0c\u5728 OAuth2 \u7684\u6388\u6743\u6d41\u7a0b\u4e2d\uff0c\u540c\u65f6\u63d0\u4f9b\u7528\u6237\u7684\u8eab\u4efd\u4fe1\u606f\uff08 id_token \uff09\u7ed9\u5230\u7b2c\u4e09\u65b9\u5ba2\u6237\u7aef\u3002 id_token \u4f7f\u7528JWT\uff08JSON Web Token\uff09\u683c\u5f0f\u8fdb\u884c\u5c01\u88c5\uff0c\u5f97\u76ca\u4e8e JWT \u7684\u81ea\u5305\u542b\u6027\uff0c\u7d27\u51d1\u6027\u4ee5\u53ca\u9632\u7be1\u6539\u673a\u5236\u7b49\u7279\u70b9\uff0c\u4f7f\u5f97 id_token \u53ef\u4ee5\u5b89\u5168\u5730\u4f20\u9012\u7ed9\u7b2c\u4e09\u65b9\u5ba2\u6237\u7aef\u7a0b\u5e8f\u5e76\u4e14\u6613\u4e8e\u9a8c\u8bc1\u3002 JSON Web Token\uff08JWT\uff09\u662f\u4e00\u4e2a\u5f00\u653e\u7684\u884c\u4e1a\u6807\u51c6\uff08RFC 7519\uff09\uff0c\u5b83\u5b9a\u4e49\u4e86\u4e00\u79cd\u7b80\u6d01\u7684\u3001\u81ea\u5305\u542b \u7684\u534f\u8bae\u683c\u5f0f\uff0c\u7528\u4e8e\u5728\u901a\u4fe1\u53cc\u65b9\u95f4\u4f20\u9012 JSON \u5bf9\u8c61\uff0c\u4f20\u9012\u7684\u4fe1\u606f\u7ecf\u8fc7\u6570\u5b57\u7b7e\u540d\u53ef\u4ee5\u88ab\u9a8c\u8bc1\u548c\u4fe1\u4efb\u3002\u60f3\u8981\u4e86\u89e3 JWT \u7684\u8be6\u7ec6\u5185\u5bb9\u53c2\u89c1 JWT\uff08JSON Web Token\uff09 \u3002 2 Kubernetes OpenID Connect \u8ba4\u8bc1\u6d41\u7a0b \u5728 Kubernetes \u4e2d OpenID Connect \u7684\u8ba4\u8bc1\u6d41\u7a0b\u5982\u4e0b\uff1a - 1.\u7528\u6237\u767b\u5f55\u8ba4\u8bc1\u670d\u52a1\u5668\u3002 - 2.\u8ba4\u8bc1\u670d\u52a1\u5668\u8fd4\u56de access_token \u3001 id_token \u548c refresh_token \u3002 - 3.\u5728\u4f7f\u7528 kubectl \u65f6\uff0c\u5c06 id_token \u8bbe\u7f6e\u4e3a --token \u7684\u53c2\u6570\u503c\uff0c\u6216\u8005\u5c06\u5176\u76f4\u63a5\u6dfb\u52a0\u5230 kubeconfig \u4e2d\u3002 - 4.kubectl \u5c06 id_token \u6dfb\u52a0\u5230 HTTP \u8bf7\u6c42\u7684 Authorization \u5934\u90e8\u4e2d\uff0c\u53d1\u9001\u7ed9 API Server\u3002 - 5.API Server \u901a\u8fc7\u68c0\u67e5\u914d\u7f6e\u4e2d\u5f15\u7528\u7684\u8bc1\u4e66\u6765\u786e\u8ba4 JWT \u7684\u7b7e\u540d\u662f\u5426\u5408\u6cd5\u3002 - 6.API Server \u68c0\u67e5 id_token \u662f\u5426\u8fc7\u671f\u3002 - 7.API Server \u786e\u8ba4\u7528\u6237\u662f\u5426\u6709\u64cd\u4f5c\u8d44\u6e90\u7684\u6743\u9650\u3002 - 8.\u9274\u6743\u6210\u529f\u4e4b\u540e\uff0cAPI \u670d\u52a1\u5668\u5411 kubectl \u8fd4\u56de\u54cd\u5e94\u3002 - 9.kubectl \u5411\u7528\u6237\u8fd4\u56de\u7ed3\u679c\u3002 3 Keycloak \u4ecb\u7ecd \u672c\u6587\u5c06\u4f1a\u4f7f\u7528 Keycloak \u4f5c\u4e3a OpenID Connect \u7684\u8ba4\u8bc1\u670d\u52a1\u5668\u3002 keycloak \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u3001\u9762\u5411\u73b0\u4ee3\u5e94\u7528\u548c\u670d\u52a1\u7684 IAM\uff08\u8eab\u4efd\u8ba4\u8bc1\u548c\u8bbf\u95ee\u63a7\u5236\uff09\u89e3\u51b3\u65b9\u6848\u3002Keycloak \u63d0\u4f9b\u4e86\u5355\u70b9\u767b\u5f55\uff08SSO\uff09\u529f\u80fd\uff0c\u652f\u6301 OpenID Connect \u3001 OAuth 2.0 \u3001 SAML 2.0 \u7b49\u534f\u8bae\uff0c\u540c\u65f6 Keycloak \u4e5f\u652f\u6301\u96c6\u6210\u4e0d\u540c\u7684\u8eab\u4efd\u8ba4\u8bc1\u670d\u52a1\uff0c\u4f8b\u5982 LDAP\u3001Active Directory\u3001Github\u3001Google \u548c Facebook \u7b49\u7b49\u3002 \u5728 Keycloak \u4e2d\u6709\u4ee5\u4e0b\u51e0\u4e2a\u4e3b\u8981\u6982\u5ff5\uff1a - \u9886\u57df\uff08realms\uff09 \uff1a\u9886\u57df\u7ba1\u7406\u7740\u4e00\u6279\u7528\u6237\u3001\u8bc1\u4e66\u3001\u89d2\u8272\u3001\u7ec4\u7b49\u7b49\uff0c\u4e0d\u540c\u9886\u57df\u4e4b\u95f4\u7684\u8d44\u6e90\u662f\u76f8\u4e92\u9694\u79bb\u7684\uff0c\u5b9e\u73b0\u4e86\u591a\u79df\u6237\u7684\u6548\u679c\u3002 - \u5ba2\u6237\u7aef\uff08clients\uff09 \uff1a\u9700\u8981\u63a5\u5165 Keycloak \u5b9e\u73b0\u7528\u6237\u8ba4\u8bc1\u7684\u5e94\u7528\u548c\u670d\u52a1\u3002 - \u7528\u6237\uff08users\uff09 \uff1a\u7528\u6237\u662f\u80fd\u591f\u767b\u5f55\u5230\u5e94\u7528\u7cfb\u7edf\u7684\u5b9e\u4f53\uff0c\u62e5\u6709\u76f8\u5173\u7684\u5c5e\u6027\uff0c\u4f8b\u5982\u7535\u5b50\u90ae\u4ef6\u3001\u7528\u6237\u540d\u3001\u5730\u5740\u3001\u7535\u8bdd\u53f7\u7801\u548c\u751f\u65e5\u7b49\u7b49\u3002 - \u7ec4\uff08groups\uff09 \uff1a\u4e00\u7ec4\u7528\u6237\u7684\u96c6\u5408\uff0c\u4f60\u53ef\u4ee5\u5c06\u4e00\u7cfb\u5217\u7684\u89d2\u8272\u8d4b\u4e88\u5b9a\u4e49\u597d\u7684\u7528\u6237\u7ec4\uff0c\u4e00\u65e6\u67d0\u7528\u6237\u5c5e\u4e8e\u8be5\u7528\u6237\u7ec4\uff0c\u90a3\u4e48\u8be5\u7528\u6237\u5c06\u83b7\u5f97\u5bf9\u5e94\u7ec4\u7684\u6240\u6709\u89d2\u8272\u6743\u9650\u3002 - \u89d2\u8272\uff08roles\uff09 \uff1a\u89d2\u8272\u662f RBAC \u7684\u91cd\u8981\u6982\u5ff5\uff0c\u7528\u4e8e\u8868\u660e\u7528\u6237\u7684\u8eab\u4efd\u7c7b\u578b\u3002 - \u8bc1\u4e66\uff08credential\uff09 \uff1aKeycloak \u7528\u4e8e\u9a8c\u8bc1\u7528\u6237\u7684\u51ed\u8bc1\uff0c\u4f8b\u5982\u5bc6\u7801\u3001\u4e00\u6b21\u6027\u5bc6\u7801\u3001\u8bc1\u4e66\u3001\u6307\u7eb9\u7b49\u7b49\u3002 4 \u524d\u63d0\u6761\u4ef6 \u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u5c06\u6f14\u793a\u5982\u4f55\u90e8\u7f72\u548c\u914d\u7f6e Keycloak \u670d\u52a1\u4f5c\u4e3a API Server \u7684\u8ba4\u8bc1\u670d\u52a1\uff0c\u9700\u8981\u786e\u4fdd\u5b8c\u6210\u4e86\u4ee5\u4e0b\u51c6\u5907\uff1a - \u90e8\u7f72\u597d\u4e00\u5957 Kubernetes \u96c6\u7fa4\uff0c\u6211\u4f7f\u7528\u7684\u96c6\u7fa4\u7248\u672c\u662f v1.23.5\u3002 - \u4e00\u53f0\u5b89\u88c5\u597d Docker \u548c Docker Compose \u7684\u673a\u5668\uff0c\u7528\u4e8e\u90e8\u7f72 Keycloak \u670d\u52a1\u5668\u3002 \u672c\u5b9e\u9a8c\u4f7f\u7528\u7684\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u5728\uff1ahttps://github.com/cr7258/kubernetes-guide/tree/master/authentication/openid \u4e2d\u83b7\u53d6\u3002 5 \u90e8\u7f72 Keycloak \u670d\u52a1\u5668 Kubernetes \u8981\u6c42\u4f7f\u7528\u7684 OpenID Connect \u8ba4\u8bc1\u670d\u52a1\u5fc5\u987b\u662f HTTPS \u52a0\u5bc6\u7684\uff0c\u8fd0\u884c\u4ee5\u4e0b\u811a\u672c\u751f\u6210 Keycloak \u670d\u52a1\u5668\u7684\u79c1\u94a5\u548c\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\uff0c\u5e76\u4f7f\u7528 Kubernetes \u7684 CA \u8bc1\u4e66\u8fdb\u884c\u7b7e\u53d1\uff0c\u5f53\u7136\u8fd9\u91cc\u4f60\u4e5f\u53ef\u4ee5\u53e6\u5916\u751f\u6210\u81ea\u5df1\u7684 CA \u8bc1\u4e66\u8fdb\u884c\u7b7e\u53d1\uff0c\u5982\u679c\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u8bf7\u6ce8\u610f\u5728 7.1 \u542f\u7528 OpenID Connect \u8ba4\u8bc1 \u7ae0\u8282\u4e2d\u5c06 CA \u8bc1\u4e66\u6302\u8f7d\u8fdb API Server \u5bb9\u5668\u4e2d\u3002 #!/bin/bash # \u521b\u5efa\u76ee\u5f55\u5b58\u653e\u751f\u6210\u7684\u8bc1\u4e66 mkdir -p ssl # \u751f\u6210 x509 v3 \u6269\u5c55\u6587\u4ef6 cat << EOF > ssl/req.cnf [req] req_extensions = v3_req distinguished_name = req_distinguished_name [req_distinguished_name] [ v3_req ] basicConstraints = CA:FALSE keyUsage = nonRepudiation, digitalSignature, keyEncipherment subjectAltName = IP:11.8.36.25 # Keycloak \u670d\u52a1\u5668\u7684 IP \u5730\u5740 EOF # \u751f\u6210 Keycloak \u670d\u52a1\u5668\u79c1\u94a5 openssl genrsa -out ssl/tls.key 2048 # \u751f\u6210 Keycloak \u670d\u52a1\u5668\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\uff08CSR\uff09 openssl req -new -key ssl/tls.key -out ssl/tls.csr -subj \"/CN=Keycloak\" -config ssl/req.cnf # \u4f7f\u7528 CA \u7b7e\u53d1 Keycloak \u670d\u52a1\u5668\u8bc1\u4e66 openssl x509 -req -in ssl/tls.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out ssl/tls.crt -days 10 -extensions v3_req -extfile ssl/req.cnf \u8fd9\u91cc\u4f7f\u7528 docker-compose \u90e8\u7f72 Keycloak \u4ee5\u53ca\u4f9d\u8d56\u7684\u6570\u636e\u5e93 PostgreSQL\uff0cdocker-compose.yml \u6587\u4ef6\u5982\u4e0b\u3002\u9700\u8981\u5c06\u4e0a\u9762\u751f\u6210\u7684\u670d\u52a1\u5668\u8bc1\u4e66 tls.crt \u548c\u670d\u52a1\u5668\u79c1\u94a5 tls.key \u4e24\u4e2a\u6587\u4ef6\u6302\u8f7d\u5230 Keycloak \u5bb9\u5668\u7684 /etc/x509/https \u76ee\u5f55\u4e2d\u3002 version: '2' services: postgres: image: postgres:12.2 environment: POSTGRES_DB: keycloak POSTGRES_USER: keycloak POSTGRES_PASSWORD: keycloak keycloak: image: jboss/keycloak:16.1.1 environment: DB_VENDOR: POSTGRES DB_ADDR: postgres DB_DATABASE: keycloak DB_USER: keycloak DB_PASSWORD: keycloak KEYCLOAK_USER: admin # \u7528\u6237\u540d KEYCLOAK_PASSWORD: czw123456 # \u5bc6\u7801 volumes: - ./ssl:/etc/x509/https # \u5c06\u670d\u52a1\u5668\u8bc1\u4e66\u548c\u79c1\u94a5\u6302\u8f7d\u5230\u5bb9\u5668\u4e2d ports: - 80:8080 - 443:8443 depends_on: - postgres \u5728\u540e\u53f0\u542f\u52a8 Keycloak \u5bb9\u5668\u3002 docker-compose up -d \u786e\u8ba4 Keycloak \u548c PostgreSQL \u5df2\u7ecf\u6210\u529f\u542f\u52a8\u3002 docker-compose ps \u6d4f\u89c8\u5668\u8f93\u5165 https:// :8443\uff0c\u8bbf\u95ee Keycloak \u754c\u9762\uff0c\u7528\u6237\u540d\uff1aadmin\uff0c\u5bc6\u7801\uff1aczw123456\u3002 6 \u914d\u7f6e Keycloak 6.1 \u521b\u5efa Realm \u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a\u540d\u79f0\u4e3a project-1 \u7684 Realm \uff08\u9886\u57df\uff09\u3002 6.2 \u521b\u5efa User \u63a5\u4e0b\u6765\u624b\u52a8\u521b\u5efa\u4e00\u4e2a\u7528\u6237\u3002 \u7528\u6237\u540d\u8bbe\u7f6e\u4e3a tom\u3002 \u8bbe\u7f6e\u7528\u6237\u7684\u5bc6\u7801\uff0c\u5c06 Temporary \u53c2\u6570\u7f6e\u4e3a OFF\uff0c\u8868\u793a\u7528\u6237\u5728\u7b2c\u4e00\u6b21\u767b\u5f55\u65f6\u65e0\u9700\u91cd\u65b0\u8bbe\u7f6e\u5bc6\u7801\u3002 \u4e3a\u7528\u6237\u6dfb\u52a0\u5c5e\u6027 name\uff0c\u503c\u8bbe\u7f6e\u4e3a tom\uff0c\u5728 6.3 \u521b\u5efa Client \u7ae0\u8282\u4e2d\u4f1a\u8bf4\u660e\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u505a\u3002 \u67e5\u770b\u521b\u5efa\u7684\u7528\u6237\u3002 6.3 \u521b\u5efa Client Client \uff08\u5ba2\u6237\u7aef\uff09\u662f\u8bf7\u6c42 Keycloak \u5bf9\u7528\u6237\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u7684\u5ba2\u6237\u7aef\uff0c\u5728\u672c\u793a\u4f8b\u573a\u666f\u4e2d\uff0cAPI Server \u76f8\u5f53\u4e8e\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u8d1f\u8d23\u5411 Keycloak \u53d1\u8d77\u8eab\u4efd\u8ba4\u8bc1\u8bf7\u6c42\u3002\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a kubernetes \u7684\u5ba2\u6237\u7aef\uff0c\u4f7f\u7528 openid-connect \u534f\u8bae\u5bf9\u63a5\u3002 \u5ba2\u6237\u7aef\u521b\u5efa\u5b8c\u6210\u540e\uff0c\u9700\u8981\u4fee\u6539\u5ba2\u6237\u7aef\u7684 Access Type \u4e3a confidential \uff0c\u8868\u793a\u5ba2\u6237\u7aef\u901a\u8fc7 client secret \u6765\u83b7\u53d6\u4ee4\u724c\uff1b Valid Redirect URIs \u7528\u4e8e\u8bbe\u7f6e\u6d4f\u89c8\u5668\u767b\u5f55\u6210\u529f\u540e\u6709\u6548\u7684\u91cd\u5b9a\u5411 URL\uff0c http:// * \u5339\u914d\u6240\u6709 HTTP \u91cd\u5b9a\u5411\u7684\u7f51\u5740\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u767b\u5f55\u6210\u529f\u540e\u5c06\u4f1a\u91cd\u5b9a\u5411\u5230 http://localhost:8000\u3002 \u8981\u60f3\u8ba9 Kubernetes \u8ba4\u8bc6 Keycloak \u4e2d\u7684\u7528\u6237\uff0c\u5c31\u9700\u8981\u5728 Keycloak \u8fd4\u56de\u7684 id_token \u4e2d\u643a\u5e26\u8868\u660e\u7528\u6237\u7684\u8eab\u4efd\u7684\u4fe1\u606f\uff08\u4f8b\u5982\u7528\u6237\u540d\u3001\u7ec4\u3001\u90ae\u7bb1\u7b49\u7b49\uff09\uff0cKeycloak \u652f\u6301\u81ea\u5b9a\u4e49\u58f0\u660e\u5e76\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230 id_token \u4e2d\u3002\u5982\u4e0b\u6240\u793a\uff0c\u5728 kubernetes \u5ba2\u6237\u7aef\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a name \u7684\u6620\u5c04\u3002 Keycloak \u4f1a\u5c06 Token Claim Name \u4e2d\u8bbe\u7f6e\u7684\u5185\u5bb9\u4f5c\u4e3a\u952e\u6ce8\u5165 JWT\uff0c\u503c\u7684\u5185\u5bb9\u6765\u81ea 6.2 \u521b\u5efa User \u7ae0\u8282\u4e2d\u5728\u7528\u6237\u5c5e\u6027\u4e2d\u8bbe\u7f6e\u7684 name \u5b57\u6bb5\u7684\u503c\u3002\u4e5f\u5c31\u662f\u8bf4\u5728 JTW \u7684 payload \u4e2d\u53ef\u4ee5\u770b\u5230 name:tom \u8fd9\u4e2a\u952e\u503c\u5bf9\uff0c\u5728 7.1 \u542f\u7528 OpenID Connect \u8ba4\u8bc1 \u7ae0\u8282\u4e2d\u5c06\u4f1a\u4f7f\u7528 --oidc-username-claim=name \u53c2\u6570\u6307\u5b9a\u8bfb\u53d6 JWT \u4e2d name \u5b57\u6bb5\u7684\u503c\u4f5c\u4e3a\u7528\u6237\u540d\u3002 \u67e5\u770b\u521b\u5efa\u7684 mapper\u3002 6.4 \u5ef6\u957f Token \u65f6\u95f4\uff08\u53ef\u9009\uff09 Keycloak \u4e2d\u8bbe\u7f6e\u7684 access_token \u548c id_token \u7684\u6709\u6548\u671f\u9ed8\u8ba4\u662f 1 \u5206\u949f\uff0c\u4e3a\u4e86\u65b9\u4fbf\u540e\u7eed\u7684\u5b9e\u9a8c\uff0c\u8fd9\u91cc\u5c06\u4ee4\u724c\u7684\u6709\u6548\u671f\u5ef6\u957f\u81f3 30 \u5206\u949f\u3002 6.5 \u67e5\u770b\u7aef\u70b9\u4fe1\u606f \u70b9\u51fb Realm Settings -> General -> Endpoints \u53ef\u4ee5\u770b\u5230\u8bf7\u6c42 project-1 \u8fd9\u4e2a Realm \u76f8\u5173\u7684\u7aef\u70b9\u4fe1\u606f\uff0c\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u5c06\u4f1a\u7528\u5230\u8fd9\u4e9b\u4fe1\u606f\u3002 7 \u914d\u7f6e Kubernetes 7.1 \u542f\u7528 OpenID Connect \u8ba4\u8bc1 \u8981\u542f\u7528 OpenID Connect \u8ba4\u8bc1\uff0c\u9700\u8981\u5728 API Server \u5bb9\u5668\u7684\u542f\u52a8\u53c2\u6570\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff1a - --oidc-issuer-url \uff1aOpenID Connect \u8ba4\u8bc1\u670d\u52a1\u5668\u7684\u5730\u5740\uff0c\u53ea\u63a5\u53d7 HTTPS \u52a0\u5bc6\u7684\u5730\u5740\u3002 - --oidc-client-id \uff1a\u5ba2\u6237\u7aef ID\u3002 - --oidc-username \uff1a\u4ece JWT Claim \u4e2d\u83b7\u53d6\u7528\u6237\u540d\u7684\u5b57\u6bb5\u3002 - --oidc-username-claim \uff1a\u6dfb\u52a0\u5230 JWT Claim \u4e2d\u7684\u7528\u6237\u540d\u524d\u7f00\uff0c\u7528\u4e8e\u907f\u514d\u4e0e\u73b0\u6709\u7684\u7528\u6237\u540d\u4ea7\u751f\u51b2\u7a81\u3002\u4f8b\u5982\uff0c\u6b64\u6807\u5fd7\u503c\u4e3a oidc: \u65f6\u5c06\u521b\u5efa\u5f62\u5982 oidc:tom \u7684\u7528\u6237\u540d\uff0c \u6b64\u6807\u5fd7\u503c\u4e3a - \u65f6\uff0c\u610f\u5473\u7740\u7981\u6b62\u6dfb\u52a0\u7528\u6237\u540d\u524d\u7f00\u3002 \u5982\u679c\u4f60\u4e3a\u7528\u6237\u540d\u6dfb\u52a0\u7684\u524d\u7f00\u662f\u4ee5 : \u7ed3\u5c3e\u7684\uff0c\u5728\u8bbe\u7f6e API Server \u65f6\u8bf7\u7528\u53cc\u5f15\u53f7\u5305\u56f4\uff0c\u4f8b\u5982 \"--oidc-username-prefix=oidc:\" \u3002 - --oidc-ca-file \uff1a\u7b7e\u53d1 Keycloak \u670d\u52a1\u5668\u8bc1\u4e66\u7684 CA \u8bc1\u4e66\u8def\u5f84\uff0c\u5982\u679c\u7b7e\u53d1\u8bc1\u4e66\u7684\u662f\u53d7\u4fe1\u4efb\u7684 CA \u673a\u6784\uff0c\u4e0d\u7528\u8bbe\u7f6e\u8be5\u53c2\u6570\u3002 \u5173\u4e8e OpenID Connect \u8bbe\u7f6e\u7684\u53c2\u6570\u8be6\u60c5\u53c2\u89c1 openid-connect-tokens \u3002 7.2 \u8bbe\u7f6e RBAC \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a namespace-view \u7684\u89d2\u8272\uff0c\u8be5\u89d2\u8272\u62e5\u6709 namespaces \u8d44\u6e90\u7684\u8bfb\u53d6\u6743\u9650\uff0c\u7136\u540e\u5c06\u8be5\u89d2\u8272\u548c\u7528\u6237 tom \u8fdb\u884c\u7ed1\u5b9a\u3002 kind: ClusterRole apiVersion: rbac.authorization.k8s.io/v1 metadata: name: namespace-view rules: - apiGroups: [\"\"] resources: [\"namespaces\"] verbs: [\"get\", \"watch\", \"list\"] # \u5141\u8bb8\u8bfb\u53d6 namespace \u4fe1\u606f --- kind: ClusterRoleBinding apiVersion: rbac.authorization.k8s.io/v1 metadata: name: tom-crb roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: namespace-view # \u5173\u8054\u7684\u89d2\u8272 subjects: - kind: User name: tom # \u7528\u6237\u540d apiGroup: rbac.authorization.k8s.io 8 \u83b7\u53d6\u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86 Keycloak \u548c Kubernetes \u7684\u8bbe\u7f6e\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c1d\u8bd5\u83b7\u53d6\u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c\uff0c\u9700\u8981\u63d0\u4f9b\u4ee5\u4e0b\u53c2\u6570\uff1a - grant_type \uff1a\u83b7\u53d6\u4ee4\u724c\u7684\u65b9\u5f0f\u3002OAuth 2.0 \u89c4\u5b9a\u4e86\u56db\u79cd\u83b7\u53d6\u4ee4\u724c\u7684\u65b9\u5f0f\uff0c\u5206\u522b\u662f\uff1a\u6388\u6743\u7801\uff08authorization-code\uff09\u3001\u9690\u85cf\u5f0f\uff08implicit\uff09\u3001\u5bc6\u7801\u5f0f\uff08password\uff09\u3001\u5ba2\u6237\u7aef\u51ed\u8bc1\uff08client credentials\uff09\u3002password \u8868\u793a\u4ee5\u5bc6\u7801\u7684\u65b9\u5f0f\u83b7\u53d6\u4ee4\u724c\u3002 - client_id \uff1a\u5ba2\u6237\u7aef ID\u3002 - client_secret \uff1a\u5ba2\u6237\u7aef\u5bc6\u94a5\u3002 - username \uff1a\u7528\u6237\u540d\u3002 - password \uff1a\u5bc6\u7801\u3002 - scope \uff1a\u8981\u6c42\u7684\u6388\u6743\u8303\u56f4\uff0cOpenID Connect \u7684\u8bf7\u6c42 scope \u8bbe\u7f6e\u4e3a openid\u3002 client_secret \u53ef\u4ee5\u5728 kubernetes \u5ba2\u6237\u7aef\u7684 Credentials \u4e2d\u83b7\u53d6\uff1b\u8bf7\u6c42\u7684 URL \u4f7f\u7528 6.5 \u67e5\u770b\u7aef\u70b9\u4fe1\u606f \u7ae0\u8282\u4e2d\u770b\u5230\u7684 token_endpoint \u7684\u5730\u5740\u3002 curl -ks -X POST https://11.8.36.25/auth/realms/project-1/protocol/openid-connect/token \\ -d grant_type=password -d client_id=kubernetes \\ -d username=tom -d password=tom123456 -d scope=openid \\ -d client_secret=YsXXff8TL5EXNmSpTeDLdKf99cYBLqqq \u4ee5\u4e0a\u547d\u4ee4\u5c06\u4f1a\u8fd4\u56de 3 \u4e2a\u4ee4\u724c\uff1aaccess_token\uff0cid_token\uff0crefresh_token\uff0c\u4ee4\u724c\u7684\u6709\u6548\u671f\u4e3a 30 \u5206\u949f\uff081800 \u79d2\uff09\u3002 { \"access_token\": \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJZUFB3M0l2MHQ5WHEzMW0zLUtCemgyaHk3Um1LSEJ5dEtIdWhHSWY4Vkw0In0.eyJleHAiOjE2NDkxNTQ3MzgsImlhdCI6MTY0OTE1MjkzOCwianRpIjoiOTZmYzY2ZWMtMTFjNC00Y2JkLTkwNWYtMDhjMGQ4ODkyNjc3IiwiaXNzIjoiaHR0cHM6Ly8xMS44LjM2LjI1L2F1dGgvcmVhbG1zL3Byb2plY3QtMSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIwNGVjMDdjMy1mZjY0LTRjZDUtYTc3ZS03MzllOWU3OWVjMmIiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJrdWJlcm5ldGVzIiwic2Vzc2lvbl9zdGF0ZSI6IjQ1ODY1NjM2LTIyMTgtNGE0MC1hZDJlLTkzZGUyYmVkYmQzYiIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJkZWZhdWx0LXJvbGVzLXByb2plY3QtMSIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInNpZCI6IjQ1ODY1NjM2LTIyMTgtNGE0MC1hZDJlLTkzZGUyYmVkYmQzYiIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6InRvbSIsInByZWZlcnJlZF91c2VybmFtZSI6InRvbSJ9.h9F09-OZ9mFR4D6eUQ4lrTSRiSTcTXa8Kzd6B5NuWj7i_WpN4Lx_LKk9lVzb5Mh7ZeQScueYrTQ1ckn59MZdvZ3Y1c-zM8qhYsekSXLNk4HF9ijlIPi7NtlMdA_YUUc5IwcdzfSFJtcyP51CIsOxDto9-mwttlN1Cc-SotviTk4WEpy_T-Y4ZXFlBhrLjrx3o17nvMtEeM3SZbs2OlmlwnKNGs7AMC5FFq5hD-F_9eBR5GclIcLITsxLgRBI9QaSoWVWIVuvUSap04whHLLlQKKqo9sCr5bSUNRBDCCGhu3JLI5-wFZL8k59XSlxOu5MT7DeA8bXmkRdepUxfF6QWA\", \"expires_in\": 1800, # access_token \u548c id_token \u7684\u8fc7\u671f\u65f6\u95f4 \"refresh_expires_in\": 1800, # refresh_token \u7684\u8fc7\u671f\u65f6\u95f4 \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI3ZjMyMzBkNS0xNzZhLTQ1YjktOTUxNC0xZjBhY2JmODdhMzMifQ.eyJleHAiOjE2NDkxNTQ3MzgsImlhdCI6MTY0OTE1MjkzOCwianRpIjoiZTRjODllN2ItODllZi00MDFjLWEwZGMtZmQxZjc2MGMxN2UyIiwiaXNzIjoiaHR0cHM6Ly8xMS44LjM2LjI1L2F1dGgvcmVhbG1zL3Byb2plY3QtMSIsImF1ZCI6Imh0dHBzOi8vMTEuOC4zNi4yNS9hdXRoL3JlYWxtcy9wcm9qZWN0LTEiLCJzdWIiOiIwNGVjMDdjMy1mZjY0LTRjZDUtYTc3ZS03MzllOWU3OWVjMmIiLCJ0eXAiOiJSZWZyZXNoIiwiYXpwIjoia3ViZXJuZXRlcyIsInNlc3Npb25fc3RhdGUiOiI0NTg2NTYzNi0yMjE4LTRhNDAtYWQyZS05M2RlMmJlZGJkM2IiLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwic2lkIjoiNDU4NjU2MzYtMjIxOC00YTQwLWFkMmUtOTNkZTJiZWRiZDNiIn0.B8k6olblNpS6aU5mrQ7_62K1pPibwhvlboxoVi3ENrA\", \"token_type\": \"Bearer\", \"id_token\": \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJZUFB3M0l2MHQ5WHEzMW0zLUtCemgyaHk3Um1LSEJ5dEtIdWhHSWY4Vkw0In0.eyJleHAiOjE2NDkxNTQ3MzgsImlhdCI6MTY0OTE1MjkzOCwiYXV0aF90aW1lIjowLCJqdGkiOiIxMzJkYzU4Zi0wNWQ4LTQwNGUtOTkyZi1mMmVkMDU3Y2QyOTciLCJpc3MiOiJodHRwczovLzExLjguMzYuMjUvYXV0aC9yZWFsbXMvcHJvamVjdC0xIiwiYXVkIjoia3ViZXJuZXRlcyIsInN1YiI6IjA0ZWMwN2MzLWZmNjQtNGNkNS1hNzdlLTczOWU5ZTc5ZWMyYiIsInR5cCI6IklEIiwiYXpwIjoia3ViZXJuZXRlcyIsInNlc3Npb25fc3RhdGUiOiI0NTg2NTYzNi0yMjE4LTRhNDAtYWQyZS05M2RlMmJlZGJkM2IiLCJhdF9oYXNoIjoiWm5UVUtwYUxKRno2RHZTSlNEckZQUSIsImFjciI6IjEiLCJzaWQiOiI0NTg2NTYzNi0yMjE4LTRhNDAtYWQyZS05M2RlMmJlZGJkM2IiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsIm5hbWUiOiJ0b20iLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0b20ifQ.jDTGKWsvg-2z-01isqOpdHqiGSpiXxC3JKdgcVnBLx26xIEZdrjjsQxEXMd0yXJCqdiD4VNaQ6eHHJCjg3gyJE6_TT3XsxLafpBcfNb0N2TEdxQQxmwfUwK18SWAPFoUqd0ErhvZ_LelecOqytHOV2fOgkH58LCTbTP6mVvSsRuxo5Yp74scMLV-UWxi0ABT6NC3U5L_iiQBct_VAqQMxHu1Inv0RRYBA14L6AHtjNmhGoXTYakXqH_4PqZqlxt9rx-uINkRSlY0rV-eWyS-8xaOhKDu4zLWhJTgE_4YguNi2jXcd5ppM6p6uOzM48-az1flXpsPo8VUDgNsfrzg3A\", \"not-before-policy\": 0, \"session_state\": \"45865636-2218-4a40-ad2e-93de2bedbd3b\", \"scope\": \"openid profile email\" } id_token \u88ab\u7f16\u7801\u4e3a JTW \u683c\u5f0f\u7684\u6570\u636e\uff0c\u5c06\u5185\u5bb9\u590d\u5236\u5230 https://jwt.io/ \u7f51\u7ad9\u4e0a\u53ef\u4ee5\u770b\u5230 id_token \u7684\u5185\u5bb9\uff0c\u5728 payload \u90e8\u5206\u4e2d\u53ef\u4ee5\u770b\u5230\u6807\u8bc6\u7684\u7528\u6237\u4fe1\u606f\uff1a name:tom \u3002 \u8bf7\u6c42 API Server \u5217\u51fa\u6240\u6709 namespace\uff0c\u5728 curl \u547d\u4ee4\u4e2d\u4f7f\u7528 -H \u53c2\u6570\u5c06 id_token \u9644\u52a0\u5230 HTTP \u8bf7\u6c42\u7684 Header \u4e2d\u3002 curl -k https://11.8.36.162:6443/api/v1/namespaces \\ -H \"Authorization: Bearer <id_token>\" # \u8fd4\u56de\u7ed3\u679c { \"kind\": \"NamespaceList\", \"apiVersion\": \"v1\", \"metadata\": { \"resourceVersion\": \"1120382\" }, \"items\": [ { \"metadata\": { \"name\": \"calico-apiserver\", \"uid\": \"3272d2ab-f842-4552-a87a-a9a7a14b3768\", \"resourceVersion\": \"1679\", \"creationTimestamp\": \"2022-03-29T02:21:45Z\", \"labels\": { \"kubernetes.io/metadata.name\": \"calico-apiserver\", \"name\": \"calico-apiserver\" }, ...... \u6211\u4eec\u521a\u521a\u7533\u8bf7\u7684\u4ee4\u724c\u7684\u6709\u6548\u671f\u662f 30 \u5206\u949f\uff0cOAuth 2.0 \u5141\u8bb8\u7528\u6237\u81ea\u52a8\u66f4\u65b0\u4ee4\u724c\uff0c\u5728\u4ee4\u724c\u5230\u671f\u4e4b\u524d\uff0c\u53ef\u4ee5\u4f7f\u7528 refresh_token \u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\uff0c\u53bb\u66f4\u65b0\u4ee4\u724c\u3002 curl -ks -X POST https://11.8.36.25/auth/realms/project-1/protocol/openid-connect/token \\ -d grant_type=refresh_token -d client_id=kubernetes \\ -d client_secret=YsXXff8TL5EXNmSpTeDLdKf99cYBLqqq \\ -d refresh_token=<refresh_token>\" Keycloak \u670d\u52a1\u5668\u5c06\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 access_token\uff0cid_token \u548c refresh_token\u3002 { \"access_token\": \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJZUFB3M0l2MHQ5WHEzMW0zLUtCemgyaHk3Um1LSEJ5dEtIdWhHSWY4Vkw0In0.eyJleHAiOjE2NDkxNTUwOTksImlhdCI6MTY0OTE1MzI5OSwianRpIjoiNDUzZTU0MzctOGM0MC00NjA4LThmZmEtM2M5Nzc3MGU2MDczIiwiaXNzIjoiaHR0cHM6Ly8xMS44LjM2LjI1L2F1dGgvcmVhbG1zL3Byb2plY3QtMSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIwNGVjMDdjMy1mZjY0LTRjZDUtYTc3ZS03MzllOWU3OWVjMmIiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJrdWJlcm5ldGVzIiwic2Vzc2lvbl9zdGF0ZSI6IjQ1ODY1NjM2LTIyMTgtNGE0MC1hZDJlLTkzZGUyYmVkYmQzYiIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJkZWZhdWx0LXJvbGVzLXByb2plY3QtMSIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInNpZCI6IjQ1ODY1NjM2LTIyMTgtNGE0MC1hZDJlLTkzZGUyYmVkYmQzYiIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6InRvbSIsInByZWZlcnJlZF91c2VybmFtZSI6InRvbSJ9.DUm3Ju1mmZbl_tyKCMHfUnXTJQ3-M33rcQ3WuuX_7yhEQLK086mC4TZwi0chayBB72Ge6gX9exNkhl8FPMEbw41Qrr8wHsLev-cfJWq_jnnjVKXH3hvwIR-APr-YOjL0UUDAmIGW9FUi4iPOHSvinyyii4AHy_PT4L7OlYdnG3SWGs-0g5qbIl4Sm8vMYMz7bkIU0r7Vu7bxzPnflT3yzP6rTd3Ej6DsWkddSseaAbEOLeDW6pv_YBkhMH8gbcxGtVS5THnnfC--Qr9iIw7v1OFXH3olUFK5S9_vt99fsaHjruwAKUXoSS-BbzJFsJFnXnSFeRuXsIx6M95O94pb4w\", \"expires_in\": 1800, \"refresh_expires_in\": 1800, \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI3ZjMyMzBkNS0xNzZhLTQ1YjktOTUxNC0xZjBhY2JmODdhMzMifQ.eyJleHAiOjE2NDkxNTUwOTksImlhdCI6MTY0OTE1MzI5OSwianRpIjoiNmM2YTJmN2QtNzNlMi00MTY1LTg2MmEtZDU3YmJlYmMwNmU3IiwiaXNzIjoiaHR0cHM6Ly8xMS44LjM2LjI1L2F1dGgvcmVhbG1zL3Byb2plY3QtMSIsImF1ZCI6Imh0dHBzOi8vMTEuOC4zNi4yNS9hdXRoL3JlYWxtcy9wcm9qZWN0LTEiLCJzdWIiOiIwNGVjMDdjMy1mZjY0LTRjZDUtYTc3ZS03MzllOWU3OWVjMmIiLCJ0eXAiOiJSZWZyZXNoIiwiYXpwIjoia3ViZXJuZXRlcyIsInNlc3Npb25fc3RhdGUiOiI0NTg2NTYzNi0yMjE4LTRhNDAtYWQyZS05M2RlMmJlZGJkM2IiLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwic2lkIjoiNDU4NjU2MzYtMjIxOC00YTQwLWFkMmUtOTNkZTJiZWRiZDNiIn0.N8jutxJkeEallahU5RdHkv4Lctgv8ojenuZFwrxDjPo\", \"token_type\": \"Bearer\", \"id_token\": \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJZUFB3M0l2MHQ5WHEzMW0zLUtCemgyaHk3Um1LSEJ5dEtIdWhHSWY4Vkw0In0.eyJleHAiOjE2NDkxNTUwOTksImlhdCI6MTY0OTE1MzI5OSwiYXV0aF90aW1lIjowLCJqdGkiOiIzYzljZmY2Ny01NGZlLTQ4MWItYjkwYy0xMmU4ODQwMGE3YmIiLCJpc3MiOiJodHRwczovLzExLjguMzYuMjUvYXV0aC9yZWFsbXMvcHJvamVjdC0xIiwiYXVkIjoia3ViZXJuZXRlcyIsInN1YiI6IjA0ZWMwN2MzLWZmNjQtNGNkNS1hNzdlLTczOWU5ZTc5ZWMyYiIsInR5cCI6IklEIiwiYXpwIjoia3ViZXJuZXRlcyIsInNlc3Npb25fc3RhdGUiOiI0NTg2NTYzNi0yMjE4LTRhNDAtYWQyZS05M2RlMmJlZGJkM2IiLCJhdF9oYXNoIjoiZHhfSDc2eFZEUUtseUd1Z2tHZlRlQSIsImFjciI6IjEiLCJzaWQiOiI0NTg2NTYzNi0yMjE4LTRhNDAtYWQyZS05M2RlMmJlZGJkM2IiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsIm5hbWUiOiJ0b20iLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0b20ifQ.IXnHePIhj7vjxPtENmTsv1PJ9xXrlowtMsR4akFblGEo__YYWs4GWY0aFOKGQTyFh6sVtGy7olOxEcHwgVRkp7Sfzeplx7o9Z-c5OYQORqmM0pX329oT9VfCBMMBX5ifIZPPfUlxZVLmygXUBk6LhnxD9MDzThEpHscoNnbHAODjSI2b_pTBOcLnr-inXl3klvaLi_Ti8SPCgd-cssd093DyvVK8Gb_UnpygtNVrailn-OU59wZu7wl-ah-pSqi9pAQTc3S4SJ_5aE722I23r6zxGwqghBxRKGqNS9vGcHsGgRfBHUQZOwa_w0cHyfvRfwVaqLn3_8JDrW-aCn3FuA\", \"not-before-policy\": 0, \"session_state\": \"45865636-2218-4a40-ad2e-93de2bedbd3b\", \"scope\": \"openid profile email\" } 9 \u7528\u6237\u8bbf\u95ee\u8d44\u6e90 9.1 \u65b9\u5f0f\u4e00\uff1aOIDC \u8eab\u4efd\u8ba4\u8bc1\u7ec4\u4ef6 \u63a5\u4e0b\u6765\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5728 kubeconfig \u6587\u4ef6\u4e2d\u4e3a\u7528\u6237 tom \u6dfb\u52a0\u65b0\u7684\u51ed\u636e\uff0c idp-issuer-url \u53c2\u6570\u7684 URL \u4f7f\u7528 6.5 \u67e5\u770b\u7aef\u70b9\u4fe1\u606f \u7ae0\u8282\u4e2d\u770b\u5230\u7684 issuer \u7684\u5730\u5740\u3002 kubectl config set-credentials tom \\ --auth-provider=oidc \\ --auth-provider-arg=idp-issuer-url=https://11.8.36.25/auth/realms/project-1 \\ --auth-provider-arg=client-id=kubernetes \\ --auth-provider-arg=client-secret=YsXXff8TL5EXNmSpTeDLdKf99cYBLqqq \\ --auth-provider-arg=refresh-token=<refresh_token> \\ --auth-provider-arg=id-token=<id_token> \\ --auth-provider-arg=idp-certificate-authority=/etc/kubernetes/pki/ca.crt \u7136\u540e\u5728 kubectl \u547d\u4ee4\u4e2d\u4f7f\u7528 --user \u53c2\u6570\u6307\u5b9a\u4f7f\u7528 tom \u7528\u6237\u8fdb\u884c\u8bbf\u95ee\uff0c\u53ef\u4ee5\u770b\u5230\u8be5\u7528\u6237\u53ea\u6709\u83b7\u53d6 namespace \u7684\u6743\u9650\u3002 # \u53ef\u4ee5\u83b7\u53d6 namespace $ kubectl --user tom get namespace NAME STATUS AGE calico-apiserver Active 7d7h calico-system Active 7d8h default Active 7d8h kube-node-lease Active 7d8h kube-public Active 7d8h kube-system Active 7d8h tigera-operator Active 7d8h # \u6ca1\u6709\u83b7\u53d6 pod \u7684\u6743\u9650 $ kubectl --user tom get pod Error from server (Forbidden): pods is forbidden: User \"tom\" cannot list resource \"pods\" in API group \"\" in the namespace \"default\" \u6211\u4eec\u53ef\u4ee5\u4e3a\u8be5\u7528\u6237\u6dfb\u52a0\u4e0a\u4e0b\u6587\uff0c\u65b9\u4fbf\u5728\u591a\u96c6\u7fa4/\u591a\u7528\u6237\u7684\u73af\u5883\u4e0b\u8fdb\u884c\u5207\u6362\u3002 kubectl config set-context tom --cluster=<\u96c6\u7fa4\u540d> --user=tom \u67e5\u770b ~/.kube/config \u6587\u4ef6\u53ef\u4ee5\u770b\u5230\u4e3a tom \u7528\u6237\u6dfb\u52a0\u7684\u51ed\u636e\u548c\u4e0a\u4e0b\u6587\u3002 \u5207\u6362\u5230\u7528\u6237 tom \u8fdb\u884c\u8bbf\u95ee\u3002 # \u5207\u6362\u7528\u6237\u4e0a\u4e0b\u6587 kubectl config use-context tom kubectl get namespaces 9.2 \u65b9\u5f0f\u4e8c\uff1a\u4f7f\u7528 --token \u9009\u9879 kubectl \u547d\u4ee4\u5141\u8bb8\u4f7f\u7528 --token \u9009\u9879\u4f20\u9012\u4e00\u4e2a\u4ee4\u724c\u3002 kubectl get namespace --user tom --token=<id_token> 9.3 \u65b9\u5f0f\u4e09\uff1a\u4f7f\u7528 Kubelogin \u524d\u9762\u4ecb\u7ecd\u7684\u65b9\u5f0f\u4e00\u548c\u65b9\u5f0f\u4e8c\u6709\u4e00\u4e2a\u7f3a\u70b9\uff0c\u90a3\u5c31\u662f\u5728\u4ee4\u724c\u8fc7\u671f\u540e\u9700\u8981\u624b\u52a8\u83b7\u53d6\u65b0\u7684\u4ee4\u724c\uff0c\u7136\u540e\u66f4\u65b0\u5230 kubeconfig \u6587\u4ef6\u6216\u8005 --token \u53c2\u6570\u4e2d\u3002\u597d\u5728\u793e\u533a\u63d0\u4f9b\u4e86 kubelogin \u63d2\u4ef6\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e00\u7e41\u7410\u7684\u95ee\u9898\uff0ckubelogin \u662f\u4e00\u4e2a\u7528\u4e8e Kubernetes OpenID Connect \u8fdb\u884c\u8eab\u4efd\u8ba4\u8bc1\u7684\u63d2\u4ef6\uff0c\u4e5f\u79f0\u4e3a kubectl oidc-login\u3002\u5f53\u8fd0\u884c kubectl \u547d\u4ee4\u65f6\uff0ckubelogin \u4f1a\u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u7528\u6237\u9700\u8981\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u767b\u5f55\u7a0b\u5e8f\uff0c\u8ba4\u8bc1\u901a\u8fc7\u540e\uff0ckubelogin \u4f1a\u4ece\u8ba4\u8bc1\u670d\u52a1\u5668\u83b7\u53d6\u4e00\u4e2a\u4ee4\u724c\uff0c\u7136\u540e kubectl \u5c31\u53ef\u4ee5\u4f7f\u7528\u8be5\u4ee4\u724c\u548c API Server \u8fdb\u884c\u901a\u4fe1\uff0c\u5177\u4f53\u7684\u6d41\u7a0b\u56fe\u5982\u4e0b\uff1a kubelogin \u63d2\u4ef6\u652f\u6301\u4e0d\u540c\u7684\u65b9\u5f0f\u5b89\u88c5\uff0c\u5305\u62ec Homebrew\uff0cKrew\uff0cChocolatey \u7b49\u7b49\u3002 # Homebrew (macOS and Linux) brew install int128/kubelogin/kubelogin # Krew (macOS, Linux, Windows and ARM) kubectl krew install oidc-login # Chocolatey (Windows) choco install kubelogin \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5728 kubeconfig \u6587\u4ef6\u4e2d\u6dfb\u52a0\u7528\u6237 tom \u7684\u51ed\u8bc1\uff0c --insecure-skip-tls-verify \u53c2\u6570\u8868\u793a\u5ffd\u7565\u81ea\u7b7e\u540d\u8bc1\u4e66\u4e0d\u5b89\u5168\u7684\u98ce\u9669\u3002\u5f53\u7528\u6237 tom \u6267\u884c kubectl \u547d\u4ee4\u65f6\uff0c\u5c06\u4f1a\u901a\u8fc7 kubectl oidc-login get-token \u547d\u4ee4\u83b7\u53d6\u4ee4\u724c\u3002 kubectl config set-credentials tom \\ --exec-api-version=client.authentication.k8s.io/v1beta1 \\ --exec-command=kubectl \\ --exec-arg=oidc-login \\ --exec-arg=get-token \\ --exec-arg=--oidc-issuer-url=https://11.8.36.25/auth/realms/project-1 \\ --exec-arg=--oidc-client-id=kubernetes \\ --exec-arg=--oidc-client-secret=YsXXff8TL5EXNmSpTeDLdKf99cYBLqqq \\ --exec-arg=--insecure-skip-tls-verify \u6709\u5173 kubelogin \u7684\u8be6\u7ec6\u53c2\u6570\u53c2\u89c1\uff1a kubelogin usage and options \u3002\u8bbe\u7f6e\u5b8c\u6bd5\u540e\uff0c\u4f7f\u7528 kubectl \u547d\u4ee4\u8bbf\u95ee\u65f6\uff0c\u6d4f\u89c8\u5668\u4f1a\u81ea\u52a8\u5f39\u51fa Keycloak \u8ba4\u8bc1\u9875\u9762\uff0c\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u540e\u5c31\u53ef\u4ee5\u6b63\u5e38\u8bbf\u95ee\u76f8\u5e94\u7684\u8d44\u6e90\u4e86\u3002 kubectl --user=tom get namespace kubelogin \u7684 id_token \u548c refresh_token \u7f13\u5b58\u5728 ~/.kube/cache/oidc-login/ \u76ee\u5f55\u4e2d\uff0c\u6ca1\u6709\u8d85\u8fc7\u4ee4\u724c\u6709\u6548\u671f\u65f6\uff0c\u65e0\u9700\u518d\u6b21\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u8fdb\u884c\u8ba4\u8bc1\u3002 10 \u603b\u7ed3 \u672c\u6587\u901a\u8fc7\u8be6\u7ec6\u7684\u6b65\u9aa4\u4e3a\u5927\u5bb6\u5c55\u793a\u4e86\u5982\u4f55\u8ba9 API Server \u4f7f\u7528 OpenID Connect \u534f\u8bae\u96c6\u6210 Keycloak \u8fdb\u884c\u8eab\u4efd\u8ba4\u8bc1\uff0c\u540c\u65f6\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 kubectl \u548c kubelogin \u8fdb\u884c\u7528\u6237\u767b\u5f55\u8ba4\u8bc1\u3002 \u53c2\u8003\u8d44\u6599 \u5229\u7528Keycloak\u5b9e\u73b0Kubernetes\u5355\u70b9\u767b\u5f55\u4e0e\u6743\u9650\u9a8c\u8bc1\uff08SSO,OIDC,RBAC\uff09 kubectl with OpenID Connect \u4f7f\u7528 KeyCloak \u5bf9 Kubernetes \u8fdb\u884c\u7edf\u4e00\u7528\u6237\u7ba1\u7406 kubelogin Kubernetes OpenID Connection authentication Kubernetes auth Keycloak as identity provider \u5982\u4f55\u5728 Apache APISIX \u4e2d\u96c6\u6210 Keycloak \u5b9e\u73b0\u8eab\u4efd\u8ba4\u8bc1 Configuring Keycloak for production Keycloak with Quarkus: Better together Keycloak Docker image How to authenticate user with Keycloak OIDC Provider in Kubernetes Keycloak access token expires too soon How to Secure Your Kubernetes Cluster with OpenID Connect and RBAC \u6b22\u8fce\u5173\u6ce8","title":"\u5728 Kubernetes \u4e2d\u4f7f\u7528 Keycloak OIDC Provider \u5bf9\u7528\u6237\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#kubernetes-keycloak-oidc-provider","text":"API Server \u4f5c\u4e3a Kubernetes \u7684\u7f51\u5173\uff0c\u662f\u7528\u6237\u8bbf\u95ee\u548c\u7ba1\u7406\u8d44\u6e90\u5bf9\u8c61\u7684\u5165\u53e3\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u8bbf\u95ee\u8bf7\u6c42\uff0c API Server \u90fd\u9700\u8981\u5bf9\u8bbf\u95ee\u8005\u7684\u5408\u6cd5\u6027\u8fdb\u884c\u68c0\u67e5\uff0c\u5305\u62ec\u8eab\u4efd\u9a8c\u8bc1\u3001\u6743\u9650\u9a8c\u8bc1\u7b49\u7b49\u3002Kubernetes \u652f\u6301\u591a\u79cd\u8eab\u4efd\u9a8c\u8bc1\u7684\u65b9\u5f0f\uff0c\u672c\u6587\u5c06\u5bf9 OpenID Connect \u8ba4\u8bc1\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"\u5728 Kubernetes \u4e2d\u4f7f\u7528 Keycloak OIDC Provider \u5bf9\u7528\u6237\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#1-openid-connectoidc","text":"OAuth\uff08Open Authorization\uff09\u662f\u4e00\u4e2a\u5173\u4e8e\u6388\u6743\uff08authorization\uff09\u7684\u5f00\u653e\u7f51\u7edc\u6807\u51c6\uff0c\u5141\u8bb8\u7528\u6237\u6388\u6743\u7b2c\u4e09\u65b9\u5e94\u7528\u8bbf\u95ee\u4ed6\u4eec\u5b58\u50a8\u5728\u5176\u4ed6\u670d\u52a1\u63d0\u4f9b\u8005\u4e0a\u7684\u4fe1\u606f\uff0c\u800c\u4e0d\u9700\u8981\u5c06\u7528\u6237\u540d\u548c\u5bc6\u7801\u63d0\u4f9b\u7ed9\u7b2c\u4e09\u65b9\u5e94\u7528\u3002OAuth \u5728\u5168\u4e16\u754c\u5f97\u5230\u4e86\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u76ee\u524d\u7684\u7248\u672c\u662f 2.0 \u3002 OpenID Connect (OIDC) \u662f\u4e00\u79cd\u8eab\u4efd\u9a8c\u8bc1\u534f\u8bae\uff0c\u57fa\u4e8e OAuth 2.0 \u7cfb\u5217\u89c4\u8303\u3002OAuth2 \u63d0\u4f9b\u4e86 access_token \u6765\u89e3\u51b3\u6388\u6743\u7b2c\u4e09\u65b9\u5ba2\u6237\u7aef\u8bbf\u95ee\u53d7\u4fdd\u62a4\u8d44\u6e90\u7684\u95ee\u9898\uff0cOpenID Connect \u5728\u8fd9\u4e2a\u57fa\u7840\u4e0a\u63d0\u4f9b\u4e86 id_token \u6765\u89e3\u51b3\u7b2c\u4e09\u65b9\u5ba2\u6237\u7aef \u6807\u8bc6\u7528\u6237\u8eab\u4efd \u7684\u95ee\u9898\u3002 OpenID Connect \u7684\u6838\u5fc3\u5728\u4e8e\uff0c\u5728 OAuth2 \u7684\u6388\u6743\u6d41\u7a0b\u4e2d\uff0c\u540c\u65f6\u63d0\u4f9b\u7528\u6237\u7684\u8eab\u4efd\u4fe1\u606f\uff08 id_token \uff09\u7ed9\u5230\u7b2c\u4e09\u65b9\u5ba2\u6237\u7aef\u3002 id_token \u4f7f\u7528JWT\uff08JSON Web Token\uff09\u683c\u5f0f\u8fdb\u884c\u5c01\u88c5\uff0c\u5f97\u76ca\u4e8e JWT \u7684\u81ea\u5305\u542b\u6027\uff0c\u7d27\u51d1\u6027\u4ee5\u53ca\u9632\u7be1\u6539\u673a\u5236\u7b49\u7279\u70b9\uff0c\u4f7f\u5f97 id_token \u53ef\u4ee5\u5b89\u5168\u5730\u4f20\u9012\u7ed9\u7b2c\u4e09\u65b9\u5ba2\u6237\u7aef\u7a0b\u5e8f\u5e76\u4e14\u6613\u4e8e\u9a8c\u8bc1\u3002 JSON Web Token\uff08JWT\uff09\u662f\u4e00\u4e2a\u5f00\u653e\u7684\u884c\u4e1a\u6807\u51c6\uff08RFC 7519\uff09\uff0c\u5b83\u5b9a\u4e49\u4e86\u4e00\u79cd\u7b80\u6d01\u7684\u3001\u81ea\u5305\u542b \u7684\u534f\u8bae\u683c\u5f0f\uff0c\u7528\u4e8e\u5728\u901a\u4fe1\u53cc\u65b9\u95f4\u4f20\u9012 JSON \u5bf9\u8c61\uff0c\u4f20\u9012\u7684\u4fe1\u606f\u7ecf\u8fc7\u6570\u5b57\u7b7e\u540d\u53ef\u4ee5\u88ab\u9a8c\u8bc1\u548c\u4fe1\u4efb\u3002\u60f3\u8981\u4e86\u89e3 JWT \u7684\u8be6\u7ec6\u5185\u5bb9\u53c2\u89c1 JWT\uff08JSON Web Token\uff09 \u3002","title":"1 OpenID Connect\uff08OIDC\uff09\u4ecb\u7ecd"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#2-kubernetes-openid-connect","text":"\u5728 Kubernetes \u4e2d OpenID Connect \u7684\u8ba4\u8bc1\u6d41\u7a0b\u5982\u4e0b\uff1a - 1.\u7528\u6237\u767b\u5f55\u8ba4\u8bc1\u670d\u52a1\u5668\u3002 - 2.\u8ba4\u8bc1\u670d\u52a1\u5668\u8fd4\u56de access_token \u3001 id_token \u548c refresh_token \u3002 - 3.\u5728\u4f7f\u7528 kubectl \u65f6\uff0c\u5c06 id_token \u8bbe\u7f6e\u4e3a --token \u7684\u53c2\u6570\u503c\uff0c\u6216\u8005\u5c06\u5176\u76f4\u63a5\u6dfb\u52a0\u5230 kubeconfig \u4e2d\u3002 - 4.kubectl \u5c06 id_token \u6dfb\u52a0\u5230 HTTP \u8bf7\u6c42\u7684 Authorization \u5934\u90e8\u4e2d\uff0c\u53d1\u9001\u7ed9 API Server\u3002 - 5.API Server \u901a\u8fc7\u68c0\u67e5\u914d\u7f6e\u4e2d\u5f15\u7528\u7684\u8bc1\u4e66\u6765\u786e\u8ba4 JWT \u7684\u7b7e\u540d\u662f\u5426\u5408\u6cd5\u3002 - 6.API Server \u68c0\u67e5 id_token \u662f\u5426\u8fc7\u671f\u3002 - 7.API Server \u786e\u8ba4\u7528\u6237\u662f\u5426\u6709\u64cd\u4f5c\u8d44\u6e90\u7684\u6743\u9650\u3002 - 8.\u9274\u6743\u6210\u529f\u4e4b\u540e\uff0cAPI \u670d\u52a1\u5668\u5411 kubectl \u8fd4\u56de\u54cd\u5e94\u3002 - 9.kubectl \u5411\u7528\u6237\u8fd4\u56de\u7ed3\u679c\u3002","title":"2 Kubernetes OpenID Connect  \u8ba4\u8bc1\u6d41\u7a0b"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#3-keycloak","text":"\u672c\u6587\u5c06\u4f1a\u4f7f\u7528 Keycloak \u4f5c\u4e3a OpenID Connect \u7684\u8ba4\u8bc1\u670d\u52a1\u5668\u3002 keycloak \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u3001\u9762\u5411\u73b0\u4ee3\u5e94\u7528\u548c\u670d\u52a1\u7684 IAM\uff08\u8eab\u4efd\u8ba4\u8bc1\u548c\u8bbf\u95ee\u63a7\u5236\uff09\u89e3\u51b3\u65b9\u6848\u3002Keycloak \u63d0\u4f9b\u4e86\u5355\u70b9\u767b\u5f55\uff08SSO\uff09\u529f\u80fd\uff0c\u652f\u6301 OpenID Connect \u3001 OAuth 2.0 \u3001 SAML 2.0 \u7b49\u534f\u8bae\uff0c\u540c\u65f6 Keycloak \u4e5f\u652f\u6301\u96c6\u6210\u4e0d\u540c\u7684\u8eab\u4efd\u8ba4\u8bc1\u670d\u52a1\uff0c\u4f8b\u5982 LDAP\u3001Active Directory\u3001Github\u3001Google \u548c Facebook \u7b49\u7b49\u3002 \u5728 Keycloak \u4e2d\u6709\u4ee5\u4e0b\u51e0\u4e2a\u4e3b\u8981\u6982\u5ff5\uff1a - \u9886\u57df\uff08realms\uff09 \uff1a\u9886\u57df\u7ba1\u7406\u7740\u4e00\u6279\u7528\u6237\u3001\u8bc1\u4e66\u3001\u89d2\u8272\u3001\u7ec4\u7b49\u7b49\uff0c\u4e0d\u540c\u9886\u57df\u4e4b\u95f4\u7684\u8d44\u6e90\u662f\u76f8\u4e92\u9694\u79bb\u7684\uff0c\u5b9e\u73b0\u4e86\u591a\u79df\u6237\u7684\u6548\u679c\u3002 - \u5ba2\u6237\u7aef\uff08clients\uff09 \uff1a\u9700\u8981\u63a5\u5165 Keycloak \u5b9e\u73b0\u7528\u6237\u8ba4\u8bc1\u7684\u5e94\u7528\u548c\u670d\u52a1\u3002 - \u7528\u6237\uff08users\uff09 \uff1a\u7528\u6237\u662f\u80fd\u591f\u767b\u5f55\u5230\u5e94\u7528\u7cfb\u7edf\u7684\u5b9e\u4f53\uff0c\u62e5\u6709\u76f8\u5173\u7684\u5c5e\u6027\uff0c\u4f8b\u5982\u7535\u5b50\u90ae\u4ef6\u3001\u7528\u6237\u540d\u3001\u5730\u5740\u3001\u7535\u8bdd\u53f7\u7801\u548c\u751f\u65e5\u7b49\u7b49\u3002 - \u7ec4\uff08groups\uff09 \uff1a\u4e00\u7ec4\u7528\u6237\u7684\u96c6\u5408\uff0c\u4f60\u53ef\u4ee5\u5c06\u4e00\u7cfb\u5217\u7684\u89d2\u8272\u8d4b\u4e88\u5b9a\u4e49\u597d\u7684\u7528\u6237\u7ec4\uff0c\u4e00\u65e6\u67d0\u7528\u6237\u5c5e\u4e8e\u8be5\u7528\u6237\u7ec4\uff0c\u90a3\u4e48\u8be5\u7528\u6237\u5c06\u83b7\u5f97\u5bf9\u5e94\u7ec4\u7684\u6240\u6709\u89d2\u8272\u6743\u9650\u3002 - \u89d2\u8272\uff08roles\uff09 \uff1a\u89d2\u8272\u662f RBAC \u7684\u91cd\u8981\u6982\u5ff5\uff0c\u7528\u4e8e\u8868\u660e\u7528\u6237\u7684\u8eab\u4efd\u7c7b\u578b\u3002 - \u8bc1\u4e66\uff08credential\uff09 \uff1aKeycloak \u7528\u4e8e\u9a8c\u8bc1\u7528\u6237\u7684\u51ed\u8bc1\uff0c\u4f8b\u5982\u5bc6\u7801\u3001\u4e00\u6b21\u6027\u5bc6\u7801\u3001\u8bc1\u4e66\u3001\u6307\u7eb9\u7b49\u7b49\u3002","title":"3 Keycloak \u4ecb\u7ecd"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#4","text":"\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u5c06\u6f14\u793a\u5982\u4f55\u90e8\u7f72\u548c\u914d\u7f6e Keycloak \u670d\u52a1\u4f5c\u4e3a API Server \u7684\u8ba4\u8bc1\u670d\u52a1\uff0c\u9700\u8981\u786e\u4fdd\u5b8c\u6210\u4e86\u4ee5\u4e0b\u51c6\u5907\uff1a - \u90e8\u7f72\u597d\u4e00\u5957 Kubernetes \u96c6\u7fa4\uff0c\u6211\u4f7f\u7528\u7684\u96c6\u7fa4\u7248\u672c\u662f v1.23.5\u3002 - \u4e00\u53f0\u5b89\u88c5\u597d Docker \u548c Docker Compose \u7684\u673a\u5668\uff0c\u7528\u4e8e\u90e8\u7f72 Keycloak \u670d\u52a1\u5668\u3002 \u672c\u5b9e\u9a8c\u4f7f\u7528\u7684\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u5728\uff1ahttps://github.com/cr7258/kubernetes-guide/tree/master/authentication/openid \u4e2d\u83b7\u53d6\u3002","title":"4 \u524d\u63d0\u6761\u4ef6"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#5-keycloak","text":"Kubernetes \u8981\u6c42\u4f7f\u7528\u7684 OpenID Connect \u8ba4\u8bc1\u670d\u52a1\u5fc5\u987b\u662f HTTPS \u52a0\u5bc6\u7684\uff0c\u8fd0\u884c\u4ee5\u4e0b\u811a\u672c\u751f\u6210 Keycloak \u670d\u52a1\u5668\u7684\u79c1\u94a5\u548c\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\uff0c\u5e76\u4f7f\u7528 Kubernetes \u7684 CA \u8bc1\u4e66\u8fdb\u884c\u7b7e\u53d1\uff0c\u5f53\u7136\u8fd9\u91cc\u4f60\u4e5f\u53ef\u4ee5\u53e6\u5916\u751f\u6210\u81ea\u5df1\u7684 CA \u8bc1\u4e66\u8fdb\u884c\u7b7e\u53d1\uff0c\u5982\u679c\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u8bf7\u6ce8\u610f\u5728 7.1 \u542f\u7528 OpenID Connect \u8ba4\u8bc1 \u7ae0\u8282\u4e2d\u5c06 CA \u8bc1\u4e66\u6302\u8f7d\u8fdb API Server \u5bb9\u5668\u4e2d\u3002 #!/bin/bash # \u521b\u5efa\u76ee\u5f55\u5b58\u653e\u751f\u6210\u7684\u8bc1\u4e66 mkdir -p ssl # \u751f\u6210 x509 v3 \u6269\u5c55\u6587\u4ef6 cat << EOF > ssl/req.cnf [req] req_extensions = v3_req distinguished_name = req_distinguished_name [req_distinguished_name] [ v3_req ] basicConstraints = CA:FALSE keyUsage = nonRepudiation, digitalSignature, keyEncipherment subjectAltName = IP:11.8.36.25 # Keycloak \u670d\u52a1\u5668\u7684 IP \u5730\u5740 EOF # \u751f\u6210 Keycloak \u670d\u52a1\u5668\u79c1\u94a5 openssl genrsa -out ssl/tls.key 2048 # \u751f\u6210 Keycloak \u670d\u52a1\u5668\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\uff08CSR\uff09 openssl req -new -key ssl/tls.key -out ssl/tls.csr -subj \"/CN=Keycloak\" -config ssl/req.cnf # \u4f7f\u7528 CA \u7b7e\u53d1 Keycloak \u670d\u52a1\u5668\u8bc1\u4e66 openssl x509 -req -in ssl/tls.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out ssl/tls.crt -days 10 -extensions v3_req -extfile ssl/req.cnf \u8fd9\u91cc\u4f7f\u7528 docker-compose \u90e8\u7f72 Keycloak \u4ee5\u53ca\u4f9d\u8d56\u7684\u6570\u636e\u5e93 PostgreSQL\uff0cdocker-compose.yml \u6587\u4ef6\u5982\u4e0b\u3002\u9700\u8981\u5c06\u4e0a\u9762\u751f\u6210\u7684\u670d\u52a1\u5668\u8bc1\u4e66 tls.crt \u548c\u670d\u52a1\u5668\u79c1\u94a5 tls.key \u4e24\u4e2a\u6587\u4ef6\u6302\u8f7d\u5230 Keycloak \u5bb9\u5668\u7684 /etc/x509/https \u76ee\u5f55\u4e2d\u3002 version: '2' services: postgres: image: postgres:12.2 environment: POSTGRES_DB: keycloak POSTGRES_USER: keycloak POSTGRES_PASSWORD: keycloak keycloak: image: jboss/keycloak:16.1.1 environment: DB_VENDOR: POSTGRES DB_ADDR: postgres DB_DATABASE: keycloak DB_USER: keycloak DB_PASSWORD: keycloak KEYCLOAK_USER: admin # \u7528\u6237\u540d KEYCLOAK_PASSWORD: czw123456 # \u5bc6\u7801 volumes: - ./ssl:/etc/x509/https # \u5c06\u670d\u52a1\u5668\u8bc1\u4e66\u548c\u79c1\u94a5\u6302\u8f7d\u5230\u5bb9\u5668\u4e2d ports: - 80:8080 - 443:8443 depends_on: - postgres \u5728\u540e\u53f0\u542f\u52a8 Keycloak \u5bb9\u5668\u3002 docker-compose up -d \u786e\u8ba4 Keycloak \u548c PostgreSQL \u5df2\u7ecf\u6210\u529f\u542f\u52a8\u3002 docker-compose ps \u6d4f\u89c8\u5668\u8f93\u5165 https:// :8443\uff0c\u8bbf\u95ee Keycloak \u754c\u9762\uff0c\u7528\u6237\u540d\uff1aadmin\uff0c\u5bc6\u7801\uff1aczw123456\u3002","title":"5 \u90e8\u7f72 Keycloak \u670d\u52a1\u5668"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#6-keycloak","text":"","title":"6 \u914d\u7f6e Keycloak"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#61-realm","text":"\u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a\u540d\u79f0\u4e3a project-1 \u7684 Realm \uff08\u9886\u57df\uff09\u3002","title":"6.1 \u521b\u5efa Realm"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#62-user","text":"\u63a5\u4e0b\u6765\u624b\u52a8\u521b\u5efa\u4e00\u4e2a\u7528\u6237\u3002 \u7528\u6237\u540d\u8bbe\u7f6e\u4e3a tom\u3002 \u8bbe\u7f6e\u7528\u6237\u7684\u5bc6\u7801\uff0c\u5c06 Temporary \u53c2\u6570\u7f6e\u4e3a OFF\uff0c\u8868\u793a\u7528\u6237\u5728\u7b2c\u4e00\u6b21\u767b\u5f55\u65f6\u65e0\u9700\u91cd\u65b0\u8bbe\u7f6e\u5bc6\u7801\u3002 \u4e3a\u7528\u6237\u6dfb\u52a0\u5c5e\u6027 name\uff0c\u503c\u8bbe\u7f6e\u4e3a tom\uff0c\u5728 6.3 \u521b\u5efa Client \u7ae0\u8282\u4e2d\u4f1a\u8bf4\u660e\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u505a\u3002 \u67e5\u770b\u521b\u5efa\u7684\u7528\u6237\u3002","title":"6.2 \u521b\u5efa User"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#63-client","text":"Client \uff08\u5ba2\u6237\u7aef\uff09\u662f\u8bf7\u6c42 Keycloak \u5bf9\u7528\u6237\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u7684\u5ba2\u6237\u7aef\uff0c\u5728\u672c\u793a\u4f8b\u573a\u666f\u4e2d\uff0cAPI Server \u76f8\u5f53\u4e8e\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u8d1f\u8d23\u5411 Keycloak \u53d1\u8d77\u8eab\u4efd\u8ba4\u8bc1\u8bf7\u6c42\u3002\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a kubernetes \u7684\u5ba2\u6237\u7aef\uff0c\u4f7f\u7528 openid-connect \u534f\u8bae\u5bf9\u63a5\u3002 \u5ba2\u6237\u7aef\u521b\u5efa\u5b8c\u6210\u540e\uff0c\u9700\u8981\u4fee\u6539\u5ba2\u6237\u7aef\u7684 Access Type \u4e3a confidential \uff0c\u8868\u793a\u5ba2\u6237\u7aef\u901a\u8fc7 client secret \u6765\u83b7\u53d6\u4ee4\u724c\uff1b Valid Redirect URIs \u7528\u4e8e\u8bbe\u7f6e\u6d4f\u89c8\u5668\u767b\u5f55\u6210\u529f\u540e\u6709\u6548\u7684\u91cd\u5b9a\u5411 URL\uff0c http:// * \u5339\u914d\u6240\u6709 HTTP \u91cd\u5b9a\u5411\u7684\u7f51\u5740\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u767b\u5f55\u6210\u529f\u540e\u5c06\u4f1a\u91cd\u5b9a\u5411\u5230 http://localhost:8000\u3002 \u8981\u60f3\u8ba9 Kubernetes \u8ba4\u8bc6 Keycloak \u4e2d\u7684\u7528\u6237\uff0c\u5c31\u9700\u8981\u5728 Keycloak \u8fd4\u56de\u7684 id_token \u4e2d\u643a\u5e26\u8868\u660e\u7528\u6237\u7684\u8eab\u4efd\u7684\u4fe1\u606f\uff08\u4f8b\u5982\u7528\u6237\u540d\u3001\u7ec4\u3001\u90ae\u7bb1\u7b49\u7b49\uff09\uff0cKeycloak \u652f\u6301\u81ea\u5b9a\u4e49\u58f0\u660e\u5e76\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230 id_token \u4e2d\u3002\u5982\u4e0b\u6240\u793a\uff0c\u5728 kubernetes \u5ba2\u6237\u7aef\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a name \u7684\u6620\u5c04\u3002 Keycloak \u4f1a\u5c06 Token Claim Name \u4e2d\u8bbe\u7f6e\u7684\u5185\u5bb9\u4f5c\u4e3a\u952e\u6ce8\u5165 JWT\uff0c\u503c\u7684\u5185\u5bb9\u6765\u81ea 6.2 \u521b\u5efa User \u7ae0\u8282\u4e2d\u5728\u7528\u6237\u5c5e\u6027\u4e2d\u8bbe\u7f6e\u7684 name \u5b57\u6bb5\u7684\u503c\u3002\u4e5f\u5c31\u662f\u8bf4\u5728 JTW \u7684 payload \u4e2d\u53ef\u4ee5\u770b\u5230 name:tom \u8fd9\u4e2a\u952e\u503c\u5bf9\uff0c\u5728 7.1 \u542f\u7528 OpenID Connect \u8ba4\u8bc1 \u7ae0\u8282\u4e2d\u5c06\u4f1a\u4f7f\u7528 --oidc-username-claim=name \u53c2\u6570\u6307\u5b9a\u8bfb\u53d6 JWT \u4e2d name \u5b57\u6bb5\u7684\u503c\u4f5c\u4e3a\u7528\u6237\u540d\u3002 \u67e5\u770b\u521b\u5efa\u7684 mapper\u3002","title":"6.3 \u521b\u5efa Client"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#64-token","text":"Keycloak \u4e2d\u8bbe\u7f6e\u7684 access_token \u548c id_token \u7684\u6709\u6548\u671f\u9ed8\u8ba4\u662f 1 \u5206\u949f\uff0c\u4e3a\u4e86\u65b9\u4fbf\u540e\u7eed\u7684\u5b9e\u9a8c\uff0c\u8fd9\u91cc\u5c06\u4ee4\u724c\u7684\u6709\u6548\u671f\u5ef6\u957f\u81f3 30 \u5206\u949f\u3002","title":"6.4 \u5ef6\u957f Token \u65f6\u95f4\uff08\u53ef\u9009\uff09"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#65","text":"\u70b9\u51fb Realm Settings -> General -> Endpoints \u53ef\u4ee5\u770b\u5230\u8bf7\u6c42 project-1 \u8fd9\u4e2a Realm \u76f8\u5173\u7684\u7aef\u70b9\u4fe1\u606f\uff0c\u5728\u540e\u9762\u7684\u7ae0\u8282\u4e2d\u5c06\u4f1a\u7528\u5230\u8fd9\u4e9b\u4fe1\u606f\u3002","title":"6.5 \u67e5\u770b\u7aef\u70b9\u4fe1\u606f"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#7-kubernetes","text":"","title":"7 \u914d\u7f6e Kubernetes"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#71-openid-connect","text":"\u8981\u542f\u7528 OpenID Connect \u8ba4\u8bc1\uff0c\u9700\u8981\u5728 API Server \u5bb9\u5668\u7684\u542f\u52a8\u53c2\u6570\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u914d\u7f6e\uff1a - --oidc-issuer-url \uff1aOpenID Connect \u8ba4\u8bc1\u670d\u52a1\u5668\u7684\u5730\u5740\uff0c\u53ea\u63a5\u53d7 HTTPS \u52a0\u5bc6\u7684\u5730\u5740\u3002 - --oidc-client-id \uff1a\u5ba2\u6237\u7aef ID\u3002 - --oidc-username \uff1a\u4ece JWT Claim \u4e2d\u83b7\u53d6\u7528\u6237\u540d\u7684\u5b57\u6bb5\u3002 - --oidc-username-claim \uff1a\u6dfb\u52a0\u5230 JWT Claim \u4e2d\u7684\u7528\u6237\u540d\u524d\u7f00\uff0c\u7528\u4e8e\u907f\u514d\u4e0e\u73b0\u6709\u7684\u7528\u6237\u540d\u4ea7\u751f\u51b2\u7a81\u3002\u4f8b\u5982\uff0c\u6b64\u6807\u5fd7\u503c\u4e3a oidc: \u65f6\u5c06\u521b\u5efa\u5f62\u5982 oidc:tom \u7684\u7528\u6237\u540d\uff0c \u6b64\u6807\u5fd7\u503c\u4e3a - \u65f6\uff0c\u610f\u5473\u7740\u7981\u6b62\u6dfb\u52a0\u7528\u6237\u540d\u524d\u7f00\u3002 \u5982\u679c\u4f60\u4e3a\u7528\u6237\u540d\u6dfb\u52a0\u7684\u524d\u7f00\u662f\u4ee5 : \u7ed3\u5c3e\u7684\uff0c\u5728\u8bbe\u7f6e API Server \u65f6\u8bf7\u7528\u53cc\u5f15\u53f7\u5305\u56f4\uff0c\u4f8b\u5982 \"--oidc-username-prefix=oidc:\" \u3002 - --oidc-ca-file \uff1a\u7b7e\u53d1 Keycloak \u670d\u52a1\u5668\u8bc1\u4e66\u7684 CA \u8bc1\u4e66\u8def\u5f84\uff0c\u5982\u679c\u7b7e\u53d1\u8bc1\u4e66\u7684\u662f\u53d7\u4fe1\u4efb\u7684 CA \u673a\u6784\uff0c\u4e0d\u7528\u8bbe\u7f6e\u8be5\u53c2\u6570\u3002 \u5173\u4e8e OpenID Connect \u8bbe\u7f6e\u7684\u53c2\u6570\u8be6\u60c5\u53c2\u89c1 openid-connect-tokens \u3002","title":"7.1 \u542f\u7528 OpenID Connect  \u8ba4\u8bc1"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#72-rbac","text":"\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a namespace-view \u7684\u89d2\u8272\uff0c\u8be5\u89d2\u8272\u62e5\u6709 namespaces \u8d44\u6e90\u7684\u8bfb\u53d6\u6743\u9650\uff0c\u7136\u540e\u5c06\u8be5\u89d2\u8272\u548c\u7528\u6237 tom \u8fdb\u884c\u7ed1\u5b9a\u3002 kind: ClusterRole apiVersion: rbac.authorization.k8s.io/v1 metadata: name: namespace-view rules: - apiGroups: [\"\"] resources: [\"namespaces\"] verbs: [\"get\", \"watch\", \"list\"] # \u5141\u8bb8\u8bfb\u53d6 namespace \u4fe1\u606f --- kind: ClusterRoleBinding apiVersion: rbac.authorization.k8s.io/v1 metadata: name: tom-crb roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: namespace-view # \u5173\u8054\u7684\u89d2\u8272 subjects: - kind: User name: tom # \u7528\u6237\u540d apiGroup: rbac.authorization.k8s.io","title":"7.2 \u8bbe\u7f6e RBAC"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#8","text":"\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86 Keycloak \u548c Kubernetes \u7684\u8bbe\u7f6e\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c1d\u8bd5\u83b7\u53d6\u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c\uff0c\u9700\u8981\u63d0\u4f9b\u4ee5\u4e0b\u53c2\u6570\uff1a - grant_type \uff1a\u83b7\u53d6\u4ee4\u724c\u7684\u65b9\u5f0f\u3002OAuth 2.0 \u89c4\u5b9a\u4e86\u56db\u79cd\u83b7\u53d6\u4ee4\u724c\u7684\u65b9\u5f0f\uff0c\u5206\u522b\u662f\uff1a\u6388\u6743\u7801\uff08authorization-code\uff09\u3001\u9690\u85cf\u5f0f\uff08implicit\uff09\u3001\u5bc6\u7801\u5f0f\uff08password\uff09\u3001\u5ba2\u6237\u7aef\u51ed\u8bc1\uff08client credentials\uff09\u3002password \u8868\u793a\u4ee5\u5bc6\u7801\u7684\u65b9\u5f0f\u83b7\u53d6\u4ee4\u724c\u3002 - client_id \uff1a\u5ba2\u6237\u7aef ID\u3002 - client_secret \uff1a\u5ba2\u6237\u7aef\u5bc6\u94a5\u3002 - username \uff1a\u7528\u6237\u540d\u3002 - password \uff1a\u5bc6\u7801\u3002 - scope \uff1a\u8981\u6c42\u7684\u6388\u6743\u8303\u56f4\uff0cOpenID Connect \u7684\u8bf7\u6c42 scope \u8bbe\u7f6e\u4e3a openid\u3002 client_secret \u53ef\u4ee5\u5728 kubernetes \u5ba2\u6237\u7aef\u7684 Credentials \u4e2d\u83b7\u53d6\uff1b\u8bf7\u6c42\u7684 URL \u4f7f\u7528 6.5 \u67e5\u770b\u7aef\u70b9\u4fe1\u606f \u7ae0\u8282\u4e2d\u770b\u5230\u7684 token_endpoint \u7684\u5730\u5740\u3002 curl -ks -X POST https://11.8.36.25/auth/realms/project-1/protocol/openid-connect/token \\ -d grant_type=password -d client_id=kubernetes \\ -d username=tom -d password=tom123456 -d scope=openid \\ -d client_secret=YsXXff8TL5EXNmSpTeDLdKf99cYBLqqq \u4ee5\u4e0a\u547d\u4ee4\u5c06\u4f1a\u8fd4\u56de 3 \u4e2a\u4ee4\u724c\uff1aaccess_token\uff0cid_token\uff0crefresh_token\uff0c\u4ee4\u724c\u7684\u6709\u6548\u671f\u4e3a 30 \u5206\u949f\uff081800 \u79d2\uff09\u3002 { \"access_token\": \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJZUFB3M0l2MHQ5WHEzMW0zLUtCemgyaHk3Um1LSEJ5dEtIdWhHSWY4Vkw0In0.eyJleHAiOjE2NDkxNTQ3MzgsImlhdCI6MTY0OTE1MjkzOCwianRpIjoiOTZmYzY2ZWMtMTFjNC00Y2JkLTkwNWYtMDhjMGQ4ODkyNjc3IiwiaXNzIjoiaHR0cHM6Ly8xMS44LjM2LjI1L2F1dGgvcmVhbG1zL3Byb2plY3QtMSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIwNGVjMDdjMy1mZjY0LTRjZDUtYTc3ZS03MzllOWU3OWVjMmIiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJrdWJlcm5ldGVzIiwic2Vzc2lvbl9zdGF0ZSI6IjQ1ODY1NjM2LTIyMTgtNGE0MC1hZDJlLTkzZGUyYmVkYmQzYiIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJkZWZhdWx0LXJvbGVzLXByb2plY3QtMSIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInNpZCI6IjQ1ODY1NjM2LTIyMTgtNGE0MC1hZDJlLTkzZGUyYmVkYmQzYiIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6InRvbSIsInByZWZlcnJlZF91c2VybmFtZSI6InRvbSJ9.h9F09-OZ9mFR4D6eUQ4lrTSRiSTcTXa8Kzd6B5NuWj7i_WpN4Lx_LKk9lVzb5Mh7ZeQScueYrTQ1ckn59MZdvZ3Y1c-zM8qhYsekSXLNk4HF9ijlIPi7NtlMdA_YUUc5IwcdzfSFJtcyP51CIsOxDto9-mwttlN1Cc-SotviTk4WEpy_T-Y4ZXFlBhrLjrx3o17nvMtEeM3SZbs2OlmlwnKNGs7AMC5FFq5hD-F_9eBR5GclIcLITsxLgRBI9QaSoWVWIVuvUSap04whHLLlQKKqo9sCr5bSUNRBDCCGhu3JLI5-wFZL8k59XSlxOu5MT7DeA8bXmkRdepUxfF6QWA\", \"expires_in\": 1800, # access_token \u548c id_token \u7684\u8fc7\u671f\u65f6\u95f4 \"refresh_expires_in\": 1800, # refresh_token \u7684\u8fc7\u671f\u65f6\u95f4 \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI3ZjMyMzBkNS0xNzZhLTQ1YjktOTUxNC0xZjBhY2JmODdhMzMifQ.eyJleHAiOjE2NDkxNTQ3MzgsImlhdCI6MTY0OTE1MjkzOCwianRpIjoiZTRjODllN2ItODllZi00MDFjLWEwZGMtZmQxZjc2MGMxN2UyIiwiaXNzIjoiaHR0cHM6Ly8xMS44LjM2LjI1L2F1dGgvcmVhbG1zL3Byb2plY3QtMSIsImF1ZCI6Imh0dHBzOi8vMTEuOC4zNi4yNS9hdXRoL3JlYWxtcy9wcm9qZWN0LTEiLCJzdWIiOiIwNGVjMDdjMy1mZjY0LTRjZDUtYTc3ZS03MzllOWU3OWVjMmIiLCJ0eXAiOiJSZWZyZXNoIiwiYXpwIjoia3ViZXJuZXRlcyIsInNlc3Npb25fc3RhdGUiOiI0NTg2NTYzNi0yMjE4LTRhNDAtYWQyZS05M2RlMmJlZGJkM2IiLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwic2lkIjoiNDU4NjU2MzYtMjIxOC00YTQwLWFkMmUtOTNkZTJiZWRiZDNiIn0.B8k6olblNpS6aU5mrQ7_62K1pPibwhvlboxoVi3ENrA\", \"token_type\": \"Bearer\", \"id_token\": \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJZUFB3M0l2MHQ5WHEzMW0zLUtCemgyaHk3Um1LSEJ5dEtIdWhHSWY4Vkw0In0.eyJleHAiOjE2NDkxNTQ3MzgsImlhdCI6MTY0OTE1MjkzOCwiYXV0aF90aW1lIjowLCJqdGkiOiIxMzJkYzU4Zi0wNWQ4LTQwNGUtOTkyZi1mMmVkMDU3Y2QyOTciLCJpc3MiOiJodHRwczovLzExLjguMzYuMjUvYXV0aC9yZWFsbXMvcHJvamVjdC0xIiwiYXVkIjoia3ViZXJuZXRlcyIsInN1YiI6IjA0ZWMwN2MzLWZmNjQtNGNkNS1hNzdlLTczOWU5ZTc5ZWMyYiIsInR5cCI6IklEIiwiYXpwIjoia3ViZXJuZXRlcyIsInNlc3Npb25fc3RhdGUiOiI0NTg2NTYzNi0yMjE4LTRhNDAtYWQyZS05M2RlMmJlZGJkM2IiLCJhdF9oYXNoIjoiWm5UVUtwYUxKRno2RHZTSlNEckZQUSIsImFjciI6IjEiLCJzaWQiOiI0NTg2NTYzNi0yMjE4LTRhNDAtYWQyZS05M2RlMmJlZGJkM2IiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsIm5hbWUiOiJ0b20iLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0b20ifQ.jDTGKWsvg-2z-01isqOpdHqiGSpiXxC3JKdgcVnBLx26xIEZdrjjsQxEXMd0yXJCqdiD4VNaQ6eHHJCjg3gyJE6_TT3XsxLafpBcfNb0N2TEdxQQxmwfUwK18SWAPFoUqd0ErhvZ_LelecOqytHOV2fOgkH58LCTbTP6mVvSsRuxo5Yp74scMLV-UWxi0ABT6NC3U5L_iiQBct_VAqQMxHu1Inv0RRYBA14L6AHtjNmhGoXTYakXqH_4PqZqlxt9rx-uINkRSlY0rV-eWyS-8xaOhKDu4zLWhJTgE_4YguNi2jXcd5ppM6p6uOzM48-az1flXpsPo8VUDgNsfrzg3A\", \"not-before-policy\": 0, \"session_state\": \"45865636-2218-4a40-ad2e-93de2bedbd3b\", \"scope\": \"openid profile email\" } id_token \u88ab\u7f16\u7801\u4e3a JTW \u683c\u5f0f\u7684\u6570\u636e\uff0c\u5c06\u5185\u5bb9\u590d\u5236\u5230 https://jwt.io/ \u7f51\u7ad9\u4e0a\u53ef\u4ee5\u770b\u5230 id_token \u7684\u5185\u5bb9\uff0c\u5728 payload \u90e8\u5206\u4e2d\u53ef\u4ee5\u770b\u5230\u6807\u8bc6\u7684\u7528\u6237\u4fe1\u606f\uff1a name:tom \u3002 \u8bf7\u6c42 API Server \u5217\u51fa\u6240\u6709 namespace\uff0c\u5728 curl \u547d\u4ee4\u4e2d\u4f7f\u7528 -H \u53c2\u6570\u5c06 id_token \u9644\u52a0\u5230 HTTP \u8bf7\u6c42\u7684 Header \u4e2d\u3002 curl -k https://11.8.36.162:6443/api/v1/namespaces \\ -H \"Authorization: Bearer <id_token>\" # \u8fd4\u56de\u7ed3\u679c { \"kind\": \"NamespaceList\", \"apiVersion\": \"v1\", \"metadata\": { \"resourceVersion\": \"1120382\" }, \"items\": [ { \"metadata\": { \"name\": \"calico-apiserver\", \"uid\": \"3272d2ab-f842-4552-a87a-a9a7a14b3768\", \"resourceVersion\": \"1679\", \"creationTimestamp\": \"2022-03-29T02:21:45Z\", \"labels\": { \"kubernetes.io/metadata.name\": \"calico-apiserver\", \"name\": \"calico-apiserver\" }, ...... \u6211\u4eec\u521a\u521a\u7533\u8bf7\u7684\u4ee4\u724c\u7684\u6709\u6548\u671f\u662f 30 \u5206\u949f\uff0cOAuth 2.0 \u5141\u8bb8\u7528\u6237\u81ea\u52a8\u66f4\u65b0\u4ee4\u724c\uff0c\u5728\u4ee4\u724c\u5230\u671f\u4e4b\u524d\uff0c\u53ef\u4ee5\u4f7f\u7528 refresh_token \u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\uff0c\u53bb\u66f4\u65b0\u4ee4\u724c\u3002 curl -ks -X POST https://11.8.36.25/auth/realms/project-1/protocol/openid-connect/token \\ -d grant_type=refresh_token -d client_id=kubernetes \\ -d client_secret=YsXXff8TL5EXNmSpTeDLdKf99cYBLqqq \\ -d refresh_token=<refresh_token>\" Keycloak \u670d\u52a1\u5668\u5c06\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 access_token\uff0cid_token \u548c refresh_token\u3002 { \"access_token\": \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJZUFB3M0l2MHQ5WHEzMW0zLUtCemgyaHk3Um1LSEJ5dEtIdWhHSWY4Vkw0In0.eyJleHAiOjE2NDkxNTUwOTksImlhdCI6MTY0OTE1MzI5OSwianRpIjoiNDUzZTU0MzctOGM0MC00NjA4LThmZmEtM2M5Nzc3MGU2MDczIiwiaXNzIjoiaHR0cHM6Ly8xMS44LjM2LjI1L2F1dGgvcmVhbG1zL3Byb2plY3QtMSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIwNGVjMDdjMy1mZjY0LTRjZDUtYTc3ZS03MzllOWU3OWVjMmIiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJrdWJlcm5ldGVzIiwic2Vzc2lvbl9zdGF0ZSI6IjQ1ODY1NjM2LTIyMTgtNGE0MC1hZDJlLTkzZGUyYmVkYmQzYiIsImFjciI6IjEiLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJkZWZhdWx0LXJvbGVzLXByb2plY3QtMSIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCIsInNpZCI6IjQ1ODY1NjM2LTIyMTgtNGE0MC1hZDJlLTkzZGUyYmVkYmQzYiIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6InRvbSIsInByZWZlcnJlZF91c2VybmFtZSI6InRvbSJ9.DUm3Ju1mmZbl_tyKCMHfUnXTJQ3-M33rcQ3WuuX_7yhEQLK086mC4TZwi0chayBB72Ge6gX9exNkhl8FPMEbw41Qrr8wHsLev-cfJWq_jnnjVKXH3hvwIR-APr-YOjL0UUDAmIGW9FUi4iPOHSvinyyii4AHy_PT4L7OlYdnG3SWGs-0g5qbIl4Sm8vMYMz7bkIU0r7Vu7bxzPnflT3yzP6rTd3Ej6DsWkddSseaAbEOLeDW6pv_YBkhMH8gbcxGtVS5THnnfC--Qr9iIw7v1OFXH3olUFK5S9_vt99fsaHjruwAKUXoSS-BbzJFsJFnXnSFeRuXsIx6M95O94pb4w\", \"expires_in\": 1800, \"refresh_expires_in\": 1800, \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI3ZjMyMzBkNS0xNzZhLTQ1YjktOTUxNC0xZjBhY2JmODdhMzMifQ.eyJleHAiOjE2NDkxNTUwOTksImlhdCI6MTY0OTE1MzI5OSwianRpIjoiNmM2YTJmN2QtNzNlMi00MTY1LTg2MmEtZDU3YmJlYmMwNmU3IiwiaXNzIjoiaHR0cHM6Ly8xMS44LjM2LjI1L2F1dGgvcmVhbG1zL3Byb2plY3QtMSIsImF1ZCI6Imh0dHBzOi8vMTEuOC4zNi4yNS9hdXRoL3JlYWxtcy9wcm9qZWN0LTEiLCJzdWIiOiIwNGVjMDdjMy1mZjY0LTRjZDUtYTc3ZS03MzllOWU3OWVjMmIiLCJ0eXAiOiJSZWZyZXNoIiwiYXpwIjoia3ViZXJuZXRlcyIsInNlc3Npb25fc3RhdGUiOiI0NTg2NTYzNi0yMjE4LTRhNDAtYWQyZS05M2RlMmJlZGJkM2IiLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwic2lkIjoiNDU4NjU2MzYtMjIxOC00YTQwLWFkMmUtOTNkZTJiZWRiZDNiIn0.N8jutxJkeEallahU5RdHkv4Lctgv8ojenuZFwrxDjPo\", \"token_type\": \"Bearer\", \"id_token\": \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJZUFB3M0l2MHQ5WHEzMW0zLUtCemgyaHk3Um1LSEJ5dEtIdWhHSWY4Vkw0In0.eyJleHAiOjE2NDkxNTUwOTksImlhdCI6MTY0OTE1MzI5OSwiYXV0aF90aW1lIjowLCJqdGkiOiIzYzljZmY2Ny01NGZlLTQ4MWItYjkwYy0xMmU4ODQwMGE3YmIiLCJpc3MiOiJodHRwczovLzExLjguMzYuMjUvYXV0aC9yZWFsbXMvcHJvamVjdC0xIiwiYXVkIjoia3ViZXJuZXRlcyIsInN1YiI6IjA0ZWMwN2MzLWZmNjQtNGNkNS1hNzdlLTczOWU5ZTc5ZWMyYiIsInR5cCI6IklEIiwiYXpwIjoia3ViZXJuZXRlcyIsInNlc3Npb25fc3RhdGUiOiI0NTg2NTYzNi0yMjE4LTRhNDAtYWQyZS05M2RlMmJlZGJkM2IiLCJhdF9oYXNoIjoiZHhfSDc2eFZEUUtseUd1Z2tHZlRlQSIsImFjciI6IjEiLCJzaWQiOiI0NTg2NTYzNi0yMjE4LTRhNDAtYWQyZS05M2RlMmJlZGJkM2IiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsIm5hbWUiOiJ0b20iLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0b20ifQ.IXnHePIhj7vjxPtENmTsv1PJ9xXrlowtMsR4akFblGEo__YYWs4GWY0aFOKGQTyFh6sVtGy7olOxEcHwgVRkp7Sfzeplx7o9Z-c5OYQORqmM0pX329oT9VfCBMMBX5ifIZPPfUlxZVLmygXUBk6LhnxD9MDzThEpHscoNnbHAODjSI2b_pTBOcLnr-inXl3klvaLi_Ti8SPCgd-cssd093DyvVK8Gb_UnpygtNVrailn-OU59wZu7wl-ah-pSqi9pAQTc3S4SJ_5aE722I23r6zxGwqghBxRKGqNS9vGcHsGgRfBHUQZOwa_w0cHyfvRfwVaqLn3_8JDrW-aCn3FuA\", \"not-before-policy\": 0, \"session_state\": \"45865636-2218-4a40-ad2e-93de2bedbd3b\", \"scope\": \"openid profile email\" }","title":"8 \u83b7\u53d6\u8eab\u4efd\u9a8c\u8bc1\u4ee4\u724c"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#9","text":"","title":"9 \u7528\u6237\u8bbf\u95ee\u8d44\u6e90"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#91-oidc","text":"\u63a5\u4e0b\u6765\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5728 kubeconfig \u6587\u4ef6\u4e2d\u4e3a\u7528\u6237 tom \u6dfb\u52a0\u65b0\u7684\u51ed\u636e\uff0c idp-issuer-url \u53c2\u6570\u7684 URL \u4f7f\u7528 6.5 \u67e5\u770b\u7aef\u70b9\u4fe1\u606f \u7ae0\u8282\u4e2d\u770b\u5230\u7684 issuer \u7684\u5730\u5740\u3002 kubectl config set-credentials tom \\ --auth-provider=oidc \\ --auth-provider-arg=idp-issuer-url=https://11.8.36.25/auth/realms/project-1 \\ --auth-provider-arg=client-id=kubernetes \\ --auth-provider-arg=client-secret=YsXXff8TL5EXNmSpTeDLdKf99cYBLqqq \\ --auth-provider-arg=refresh-token=<refresh_token> \\ --auth-provider-arg=id-token=<id_token> \\ --auth-provider-arg=idp-certificate-authority=/etc/kubernetes/pki/ca.crt \u7136\u540e\u5728 kubectl \u547d\u4ee4\u4e2d\u4f7f\u7528 --user \u53c2\u6570\u6307\u5b9a\u4f7f\u7528 tom \u7528\u6237\u8fdb\u884c\u8bbf\u95ee\uff0c\u53ef\u4ee5\u770b\u5230\u8be5\u7528\u6237\u53ea\u6709\u83b7\u53d6 namespace \u7684\u6743\u9650\u3002 # \u53ef\u4ee5\u83b7\u53d6 namespace $ kubectl --user tom get namespace NAME STATUS AGE calico-apiserver Active 7d7h calico-system Active 7d8h default Active 7d8h kube-node-lease Active 7d8h kube-public Active 7d8h kube-system Active 7d8h tigera-operator Active 7d8h # \u6ca1\u6709\u83b7\u53d6 pod \u7684\u6743\u9650 $ kubectl --user tom get pod Error from server (Forbidden): pods is forbidden: User \"tom\" cannot list resource \"pods\" in API group \"\" in the namespace \"default\" \u6211\u4eec\u53ef\u4ee5\u4e3a\u8be5\u7528\u6237\u6dfb\u52a0\u4e0a\u4e0b\u6587\uff0c\u65b9\u4fbf\u5728\u591a\u96c6\u7fa4/\u591a\u7528\u6237\u7684\u73af\u5883\u4e0b\u8fdb\u884c\u5207\u6362\u3002 kubectl config set-context tom --cluster=<\u96c6\u7fa4\u540d> --user=tom \u67e5\u770b ~/.kube/config \u6587\u4ef6\u53ef\u4ee5\u770b\u5230\u4e3a tom \u7528\u6237\u6dfb\u52a0\u7684\u51ed\u636e\u548c\u4e0a\u4e0b\u6587\u3002 \u5207\u6362\u5230\u7528\u6237 tom \u8fdb\u884c\u8bbf\u95ee\u3002 # \u5207\u6362\u7528\u6237\u4e0a\u4e0b\u6587 kubectl config use-context tom kubectl get namespaces","title":"9.1 \u65b9\u5f0f\u4e00\uff1aOIDC \u8eab\u4efd\u8ba4\u8bc1\u7ec4\u4ef6"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#92-token","text":"kubectl \u547d\u4ee4\u5141\u8bb8\u4f7f\u7528 --token \u9009\u9879\u4f20\u9012\u4e00\u4e2a\u4ee4\u724c\u3002 kubectl get namespace --user tom --token=<id_token>","title":"9.2 \u65b9\u5f0f\u4e8c\uff1a\u4f7f\u7528 --token \u9009\u9879"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#93-kubelogin","text":"\u524d\u9762\u4ecb\u7ecd\u7684\u65b9\u5f0f\u4e00\u548c\u65b9\u5f0f\u4e8c\u6709\u4e00\u4e2a\u7f3a\u70b9\uff0c\u90a3\u5c31\u662f\u5728\u4ee4\u724c\u8fc7\u671f\u540e\u9700\u8981\u624b\u52a8\u83b7\u53d6\u65b0\u7684\u4ee4\u724c\uff0c\u7136\u540e\u66f4\u65b0\u5230 kubeconfig \u6587\u4ef6\u6216\u8005 --token \u53c2\u6570\u4e2d\u3002\u597d\u5728\u793e\u533a\u63d0\u4f9b\u4e86 kubelogin \u63d2\u4ef6\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e00\u7e41\u7410\u7684\u95ee\u9898\uff0ckubelogin \u662f\u4e00\u4e2a\u7528\u4e8e Kubernetes OpenID Connect \u8fdb\u884c\u8eab\u4efd\u8ba4\u8bc1\u7684\u63d2\u4ef6\uff0c\u4e5f\u79f0\u4e3a kubectl oidc-login\u3002\u5f53\u8fd0\u884c kubectl \u547d\u4ee4\u65f6\uff0ckubelogin \u4f1a\u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u7528\u6237\u9700\u8981\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u767b\u5f55\u7a0b\u5e8f\uff0c\u8ba4\u8bc1\u901a\u8fc7\u540e\uff0ckubelogin \u4f1a\u4ece\u8ba4\u8bc1\u670d\u52a1\u5668\u83b7\u53d6\u4e00\u4e2a\u4ee4\u724c\uff0c\u7136\u540e kubectl \u5c31\u53ef\u4ee5\u4f7f\u7528\u8be5\u4ee4\u724c\u548c API Server \u8fdb\u884c\u901a\u4fe1\uff0c\u5177\u4f53\u7684\u6d41\u7a0b\u56fe\u5982\u4e0b\uff1a kubelogin \u63d2\u4ef6\u652f\u6301\u4e0d\u540c\u7684\u65b9\u5f0f\u5b89\u88c5\uff0c\u5305\u62ec Homebrew\uff0cKrew\uff0cChocolatey \u7b49\u7b49\u3002 # Homebrew (macOS and Linux) brew install int128/kubelogin/kubelogin # Krew (macOS, Linux, Windows and ARM) kubectl krew install oidc-login # Chocolatey (Windows) choco install kubelogin \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5728 kubeconfig \u6587\u4ef6\u4e2d\u6dfb\u52a0\u7528\u6237 tom \u7684\u51ed\u8bc1\uff0c --insecure-skip-tls-verify \u53c2\u6570\u8868\u793a\u5ffd\u7565\u81ea\u7b7e\u540d\u8bc1\u4e66\u4e0d\u5b89\u5168\u7684\u98ce\u9669\u3002\u5f53\u7528\u6237 tom \u6267\u884c kubectl \u547d\u4ee4\u65f6\uff0c\u5c06\u4f1a\u901a\u8fc7 kubectl oidc-login get-token \u547d\u4ee4\u83b7\u53d6\u4ee4\u724c\u3002 kubectl config set-credentials tom \\ --exec-api-version=client.authentication.k8s.io/v1beta1 \\ --exec-command=kubectl \\ --exec-arg=oidc-login \\ --exec-arg=get-token \\ --exec-arg=--oidc-issuer-url=https://11.8.36.25/auth/realms/project-1 \\ --exec-arg=--oidc-client-id=kubernetes \\ --exec-arg=--oidc-client-secret=YsXXff8TL5EXNmSpTeDLdKf99cYBLqqq \\ --exec-arg=--insecure-skip-tls-verify \u6709\u5173 kubelogin \u7684\u8be6\u7ec6\u53c2\u6570\u53c2\u89c1\uff1a kubelogin usage and options \u3002\u8bbe\u7f6e\u5b8c\u6bd5\u540e\uff0c\u4f7f\u7528 kubectl \u547d\u4ee4\u8bbf\u95ee\u65f6\uff0c\u6d4f\u89c8\u5668\u4f1a\u81ea\u52a8\u5f39\u51fa Keycloak \u8ba4\u8bc1\u9875\u9762\uff0c\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u540e\u5c31\u53ef\u4ee5\u6b63\u5e38\u8bbf\u95ee\u76f8\u5e94\u7684\u8d44\u6e90\u4e86\u3002 kubectl --user=tom get namespace kubelogin \u7684 id_token \u548c refresh_token \u7f13\u5b58\u5728 ~/.kube/cache/oidc-login/ \u76ee\u5f55\u4e2d\uff0c\u6ca1\u6709\u8d85\u8fc7\u4ee4\u724c\u6709\u6548\u671f\u65f6\uff0c\u65e0\u9700\u518d\u6b21\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u8fdb\u884c\u8ba4\u8bc1\u3002","title":"9.3 \u65b9\u5f0f\u4e09\uff1a\u4f7f\u7528 Kubelogin"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#10","text":"\u672c\u6587\u901a\u8fc7\u8be6\u7ec6\u7684\u6b65\u9aa4\u4e3a\u5927\u5bb6\u5c55\u793a\u4e86\u5982\u4f55\u8ba9 API Server \u4f7f\u7528 OpenID Connect \u534f\u8bae\u96c6\u6210 Keycloak \u8fdb\u884c\u8eab\u4efd\u8ba4\u8bc1\uff0c\u540c\u65f6\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 kubectl \u548c kubelogin \u8fdb\u884c\u7528\u6237\u767b\u5f55\u8ba4\u8bc1\u3002","title":"10 \u603b\u7ed3"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#_1","text":"\u5229\u7528Keycloak\u5b9e\u73b0Kubernetes\u5355\u70b9\u767b\u5f55\u4e0e\u6743\u9650\u9a8c\u8bc1\uff08SSO,OIDC,RBAC\uff09 kubectl with OpenID Connect \u4f7f\u7528 KeyCloak \u5bf9 Kubernetes \u8fdb\u884c\u7edf\u4e00\u7528\u6237\u7ba1\u7406 kubelogin Kubernetes OpenID Connection authentication Kubernetes auth Keycloak as identity provider \u5982\u4f55\u5728 Apache APISIX \u4e2d\u96c6\u6210 Keycloak \u5b9e\u73b0\u8eab\u4efd\u8ba4\u8bc1 Configuring Keycloak for production Keycloak with Quarkus: Better together Keycloak Docker image How to authenticate user with Keycloak OIDC Provider in Kubernetes Keycloak access token expires too soon How to Secure Your Kubernetes Cluster with OpenID Connect and RBAC","title":"\u53c2\u8003\u8d44\u6599"},{"location":"%E4%BA%91%E5%8E%9F%E7%94%9F/%E5%AE%89%E5%85%A8/%E5%9C%A8%20Kubernetes%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20Keycloak%20OIDC%20Provider%20%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/#_2","text":"","title":"\u6b22\u8fce\u5173\u6ce8"}]}